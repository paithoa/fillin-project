{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { API_URL } from \"../config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthContext = createContext();\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userToken = _useState4[0],\n    setUserToken = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    userInfo = _useState6[0],\n    setUserInfo = _useState6[1];\n  var login = function () {\n    var _ref2 = _asyncToGenerator(function* (email, password) {\n      try {\n        setIsLoading(true);\n        if (!email || !password) {\n          return {\n            success: false,\n            message: 'Please enter both email and password.'\n          };\n        }\n        try {\n          var response = yield axios.post(`${API_URL}/api/users/login`, {\n            email: email,\n            password: password\n          });\n          var userData = response.data;\n          console.log('Login API response successful:', userData);\n          setUserInfo(userData);\n          setUserToken(userData.token);\n          yield AsyncStorage.setItem('userInfo', JSON.stringify(userData));\n          yield AsyncStorage.setItem('userToken', userData.token);\n          return {\n            success: true,\n            data: userData\n          };\n        } catch (apiError) {\n          console.log('API login error, falling back to demo mode:', apiError);\n          var isValidCredentials = email === 'user@example.com' && password === 'password' || email === 'test123@example.com' && password === 'password' || email === 'test@gmail.com' && password === 'password';\n          if (!isValidCredentials) {\n            return {\n              success: false,\n              message: 'Invalid email or password.'\n            };\n          }\n          var demoUser = {\n            _id: 'user_123',\n            name: 'Regular User',\n            email: email,\n            token: 'demo_token_' + Date.now(),\n            profileImage: null,\n            isPremium: true\n          };\n          if (email === 'test123@example.com') {\n            demoUser = _objectSpread(_objectSpread({}, demoUser), {}, {\n              _id: 'user_test123',\n              name: 'Test 123',\n              email: 'test123@example.com'\n            });\n          }\n          if (email === 'test@gmail.com') {\n            demoUser = _objectSpread(_objectSpread({}, demoUser), {}, {\n              _id: 'user_gmail',\n              name: 'Test Gmail',\n              email: 'test@gmail.com'\n            });\n          }\n          setUserInfo(demoUser);\n          setUserToken(demoUser.token);\n          yield AsyncStorage.setItem('userInfo', JSON.stringify(demoUser));\n          yield AsyncStorage.setItem('userToken', demoUser.token);\n          console.log('Login successful (demo mode):', demoUser.name);\n          return {\n            success: true,\n            data: demoUser\n          };\n        }\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.log('Login error:', error);\n        return {\n          success: false,\n          message: ((_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.message) || 'Login failed. Please try again.'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function login(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var register = function () {\n    var _ref3 = _asyncToGenerator(function* (userData) {\n      try {\n        var name = userData.name,\n          email = userData.email,\n          password = userData.password,\n          phone = userData.phone;\n        setUserInfo(null);\n        setUserToken(null);\n        setIsLoading(true);\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, 1500);\n        });\n        if (email === 'test@example.com') {\n          return {\n            success: false,\n            message: 'This email is already registered. Please use a different email or login.'\n          };\n        }\n        var newUser = {\n          _id: `user_${Date.now()}`,\n          name: name,\n          email: email,\n          phone: phone || null,\n          createdAt: new Date().toISOString(),\n          isPremium: false\n        };\n        return {\n          success: true,\n          data: newUser\n        };\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        console.log('Registration Error: ', error);\n        return {\n          success: false,\n          message: ((_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || 'Registration failed. Please try again.'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function register(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var logout = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        console.log('AuthContext: Starting logout process');\n        setIsLoading(true);\n        console.log('AuthContext: Clearing context state...');\n        setUserToken(null);\n        setUserInfo(null);\n        console.log('AuthContext: Clearing AsyncStorage...');\n        try {\n          yield AsyncStorage.removeItem('userInfo');\n          console.log('AuthContext: Removed userInfo from AsyncStorage');\n        } catch (storageError) {\n          console.error('AuthContext: Failed to remove userInfo from AsyncStorage:', storageError);\n        }\n        try {\n          yield AsyncStorage.removeItem('userToken');\n          console.log('AuthContext: Removed userToken from AsyncStorage');\n        } catch (storageError) {\n          console.error('AuthContext: Failed to remove userToken from AsyncStorage:', storageError);\n        }\n        var checkUserInfo = yield AsyncStorage.getItem('userInfo');\n        var checkUserToken = yield AsyncStorage.getItem('userToken');\n        if (checkUserInfo || checkUserToken) {\n          console.warn('AuthContext: Some items may not have been fully removed from AsyncStorage');\n        } else {\n          console.log('AuthContext: Successfully verified AsyncStorage items were removed');\n        }\n        console.log('AuthContext: Logout successful - all user data cleared');\n        return true;\n      } catch (error) {\n        console.error('AuthContext: Logout error:', error);\n        setUserToken(null);\n        setUserInfo(null);\n        Alert.alert('Logout Error', 'There was a problem logging out. Please try again.');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function logout() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var upgradeToPremium = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      setIsLoading(true);\n      try {\n        var wasOnTrial = userInfo == null ? void 0 : userInfo.trialActive;\n        var updatedUserInfo = _objectSpread(_objectSpread({}, userInfo), {}, {\n          isPremium: true,\n          premiumSince: new Date().toISOString(),\n          trialActive: false,\n          trialStartDate: null,\n          trialEndDate: null\n        });\n        setUserInfo(updatedUserInfo);\n        yield AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        return {\n          success: true,\n          message: wasOnTrial ? 'Your trial has been converted to a premium subscription.' : 'Your account has been upgraded to premium!'\n        };\n      } catch (error) {\n        var _error$response3, _error$response3$data;\n        console.log('Upgrade error:', error);\n        return {\n          success: false,\n          message: ((_error$response3 = error.response) == null ? void 0 : (_error$response3$data = _error$response3.data) == null ? void 0 : _error$response3$data.message) || 'An error occurred during upgrade'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function upgradeToPremium() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var cancelPremium = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      setIsLoading(true);\n      try {\n        var wasOnTrial = userInfo == null ? void 0 : userInfo.trialActive;\n        var updatedUserInfo = _objectSpread(_objectSpread({}, userInfo), {}, {\n          isPremium: false,\n          premiumSince: null,\n          trialActive: false,\n          trialStartDate: null,\n          trialEndDate: null\n        });\n        setUserInfo(updatedUserInfo);\n        yield AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        return {\n          success: true,\n          message: wasOnTrial ? 'Your free trial has been cancelled. No charges will be made.' : 'Your premium subscription has been cancelled.'\n        };\n      } catch (error) {\n        var _error$response4, _error$response4$data;\n        console.log('Cancellation error:', error);\n        return {\n          success: false,\n          message: ((_error$response4 = error.response) == null ? void 0 : (_error$response4$data = _error$response4.data) == null ? void 0 : _error$response4$data.message) || 'An error occurred while canceling'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function cancelPremium() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var isLoggedIn = function () {\n    var _ref7 = _asyncToGenerator(function* () {\n      try {\n        setIsLoading(true);\n        var _userInfo = yield AsyncStorage.getItem('userInfo');\n        var _userToken = yield AsyncStorage.getItem('userToken');\n        if (_userInfo) {\n          _userInfo = JSON.parse(_userInfo);\n          setUserInfo(_userInfo);\n          setUserToken(_userToken);\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function isLoggedIn() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var requireLogin = function requireLogin(navigation) {\n    if (!userToken) {\n      Alert.alert('Login Required', 'You need to log in to access this feature', [{\n        text: 'Cancel',\n        style: 'cancel'\n      }, {\n        text: 'Login',\n        onPress: function onPress() {\n          return navigation.navigate('Login');\n        }\n      }]);\n      return false;\n    }\n    return true;\n  };\n  var checkPhoneEligibleForTrial = function () {\n    var _ref8 = _asyncToGenerator(function* (phone) {\n      if (!phone || phone.trim() === '') {\n        return {\n          eligible: false,\n          message: 'Phone number is required for free trial'\n        };\n      }\n      return {\n        eligible: true,\n        message: 'Phone number is eligible for free trial'\n      };\n    });\n    return function checkPhoneEligibleForTrial(_x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var startFreeTrial = function () {\n    var _ref9 = _asyncToGenerator(function* (phone) {\n      try {\n        setIsLoading(true);\n        var phoneCheck = yield checkPhoneEligibleForTrial(phone);\n        if (!phoneCheck.eligible) {\n          return {\n            success: false,\n            message: phoneCheck.message\n          };\n        }\n        var trialStartDate = new Date();\n        var trialEndDate = new Date();\n        trialEndDate.setDate(trialEndDate.getDate() + 3);\n        var updatedUserInfo = _objectSpread(_objectSpread({}, userInfo), {}, {\n          trialActive: true,\n          trialStartDate: trialStartDate.toISOString(),\n          trialEndDate: trialEndDate.toISOString(),\n          phone: phone || (userInfo == null ? void 0 : userInfo.phone)\n        });\n        setUserInfo(updatedUserInfo);\n        yield AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        return {\n          success: true,\n          message: 'Your 3-day free trial has started! You will be billed $10 after the trial period unless you cancel.',\n          trialEndDate: trialEndDate.toISOString()\n        };\n      } catch (error) {\n        console.log('Error starting trial:', error);\n        return {\n          success: false,\n          message: 'Failed to start free trial. Please try again later.'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function startFreeTrial(_x5) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var checkTrialStatus = function checkTrialStatus() {\n    if (!(userInfo != null && userInfo.trialActive)) {\n      return {\n        active: false\n      };\n    }\n    var now = new Date();\n    var trialEnd = new Date(userInfo.trialEndDate);\n    if (now > trialEnd) {\n      return {\n        active: false,\n        expired: true,\n        message: 'Your free trial has expired. Please upgrade to continue accessing premium features.'\n      };\n    }\n    var diffTime = Math.abs(trialEnd - now);\n    var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return {\n      active: true,\n      daysRemaining: diffDays,\n      trialEndDate: userInfo.trialEndDate,\n      message: `Your free trial is active. ${diffDays} days remaining.`\n    };\n  };\n  var canAccessPremiumFeatures = function canAccessPremiumFeatures() {\n    if (userInfo != null && userInfo.isPremium) return {\n      access: true,\n      reason: 'premium'\n    };\n    var trialStatus = checkTrialStatus();\n    if (trialStatus.active) return {\n      access: true,\n      reason: 'trial'\n    };\n    return {\n      access: false,\n      reason: trialStatus.expired ? 'trial_expired' : 'not_premium'\n    };\n  };\n  var getUserSubscriptionStatus = function getUserSubscriptionStatus() {\n    if (!userInfo) return {\n      status: 'guest'\n    };\n    if (userInfo.isPremium) {\n      return {\n        status: 'premium',\n        since: userInfo.premiumSince,\n        displayText: 'Premium Member'\n      };\n    }\n    var trialStatus = checkTrialStatus();\n    if (trialStatus.active) {\n      return {\n        status: 'trial',\n        daysRemaining: trialStatus.daysRemaining,\n        endDate: trialStatus.trialEndDate,\n        displayText: `Trial (${trialStatus.daysRemaining} days left)`\n      };\n    }\n    if (trialStatus.expired) {\n      return {\n        status: 'expired',\n        displayText: 'Trial Expired'\n      };\n    }\n    return {\n      status: 'regular',\n      displayText: 'Regular Account'\n    };\n  };\n  var updateUserProfile = function () {\n    var _ref10 = _asyncToGenerator(function* (profileData) {\n      try {\n        var token = yield AsyncStorage.getItem('userToken');\n        if (!token) {\n          throw new Error('Authentication required');\n        }\n        setIsLoading(true);\n        var formData = new FormData();\n        formData.append('name', profileData.name || '');\n        formData.append('bio', profileData.bio || '');\n        if (profileData.interests && profileData.interests.length > 0) {\n          formData.append('interests', JSON.stringify(profileData.interests));\n        }\n        if (profileData.profileImage && profileData.profileImage.startsWith('file://')) {\n          var uriParts = profileData.profileImage.split('.');\n          var fileType = uriParts[uriParts.length - 1];\n          formData.append('profileImage', {\n            uri: profileData.profileImage,\n            name: `profile-${userInfo._id}.${fileType}`,\n            type: `image/${fileType}`\n          });\n        }\n        var updatedUserInfo = _objectSpread(_objectSpread({}, userInfo), {}, {\n          name: profileData.name || userInfo.name,\n          bio: profileData.bio || userInfo.bio,\n          interests: profileData.interests || userInfo.interests,\n          profileImage: profileData.profileImage || userInfo.profileImage\n        });\n        yield AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        setUserInfo(updatedUserInfo);\n        return {\n          success: true,\n          message: 'Profile updated successfully'\n        };\n      } catch (error) {\n        console.log('Error updating profile:', error);\n        return {\n          success: false,\n          message: error.message || 'Failed to update profile'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function updateUserProfile(_x6) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    isLoggedIn();\n  }, []);\n  return _jsx(AuthContext.Provider, {\n    value: {\n      isLoading: isLoading,\n      userToken: userToken,\n      userInfo: userInfo,\n      login: login,\n      register: register,\n      logout: logout,\n      upgradeToPremium: upgradeToPremium,\n      cancelPremium: cancelPremium,\n      requireLogin: requireLogin,\n      setUserToken: setUserToken,\n      setUserInfo: setUserInfo,\n      startFreeTrial: startFreeTrial,\n      checkTrialStatus: checkTrialStatus,\n      canAccessPremiumFeatures: canAccessPremiumFeatures,\n      updateUserProfile: updateUserProfile,\n      getUserSubscriptionStatus: getUserSubscriptionStatus\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","AsyncStorage","axios","Alert","API_URL","jsx","_jsx","AuthContext","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","userToken","setUserToken","_useState5","_useState6","userInfo","setUserInfo","login","_ref2","_asyncToGenerator","email","password","success","message","response","post","userData","data","console","log","token","setItem","JSON","stringify","apiError","isValidCredentials","demoUser","_id","name","Date","now","profileImage","isPremium","_objectSpread","error","_error$response","_error$response$data","_x","_x2","apply","arguments","register","_ref3","phone","Promise","resolve","setTimeout","newUser","createdAt","toISOString","_error$response2","_error$response2$data","_x3","logout","_ref4","removeItem","storageError","checkUserInfo","getItem","checkUserToken","warn","alert","upgradeToPremium","_ref5","wasOnTrial","trialActive","updatedUserInfo","premiumSince","trialStartDate","trialEndDate","_error$response3","_error$response3$data","cancelPremium","_ref6","_error$response4","_error$response4$data","isLoggedIn","_ref7","parse","requireLogin","navigation","text","style","onPress","navigate","checkPhoneEligibleForTrial","_ref8","trim","eligible","_x4","startFreeTrial","_ref9","phoneCheck","setDate","getDate","_x5","checkTrialStatus","active","trialEnd","expired","diffTime","Math","abs","diffDays","ceil","daysRemaining","canAccessPremiumFeatures","access","reason","trialStatus","getUserSubscriptionStatus","status","since","displayText","endDate","updateUserProfile","_ref10","profileData","Error","formData","FormData","append","bio","interests","length","startsWith","uriParts","split","fileType","uri","type","_x6","Provider","value"],"sources":["/Users/handy.hasan/Documents/SportsConnect/client/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport { Alert } from 'react-native';\nimport { API_URL } from '../config';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [userToken, setUserToken] = useState(null);\n  const [userInfo, setUserInfo] = useState(null);\n\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      \n      // Validate input\n      if (!email || !password) {\n        return { success: false, message: 'Please enter both email and password.' };\n      }\n      \n      try {\n        // Make a real API call to the backend for authentication\n        const response = await axios.post(`${API_URL}/api/users/login`, {\n          email,\n          password\n        });\n        \n        // If API call fails, it will throw an error and go to catch block\n        const userData = response.data;\n        \n        console.log('Login API response successful:', userData);\n        \n        // Save the user data and token\n        setUserInfo(userData);\n        setUserToken(userData.token);\n        \n        await AsyncStorage.setItem('userInfo', JSON.stringify(userData));\n        await AsyncStorage.setItem('userToken', userData.token);\n        \n        return { success: true, data: userData };\n      } catch (apiError) {\n        console.log('API login error, falling back to demo mode:', apiError);\n        \n        // DEMO MODE: For testing purposes only\n        // In a production app, you would remove this fallback\n        const isValidCredentials = \n          (email === 'user@example.com' && password === 'password') || \n          (email === 'test123@example.com' && password === 'password') ||\n          (email === 'test@gmail.com' && password === 'password');\n        \n        if (!isValidCredentials) {\n          return { success: false, message: 'Invalid email or password.' };\n        }\n        \n        // Create demo user based on email\n        let demoUser = {\n          _id: 'user_123',\n          name: 'Regular User',\n          email: email,\n          token: 'demo_token_' + Date.now(), // Simple token for demo\n          profileImage: null,\n          isPremium: true, // Set everyone to premium for now to enable chat\n        };\n        \n        // Special case for test123 user\n        if (email === 'test123@example.com') {\n          demoUser = {\n            ...demoUser,\n            _id: 'user_test123',\n            name: 'Test 123',\n            email: 'test123@example.com',\n          };\n        }\n        \n        // Special case for test@gmail.com\n        if (email === 'test@gmail.com') {\n          demoUser = {\n            ...demoUser,\n            _id: 'user_gmail',\n            name: 'Test Gmail',\n            email: 'test@gmail.com',\n          };\n        }\n        \n        // Store user info and token\n        setUserInfo(demoUser);\n        setUserToken(demoUser.token);\n        \n        await AsyncStorage.setItem('userInfo', JSON.stringify(demoUser));\n        await AsyncStorage.setItem('userToken', demoUser.token);\n        \n        console.log('Login successful (demo mode):', demoUser.name);\n        return { success: true, data: demoUser };\n      }\n    } catch (error) {\n      console.log('Login error:', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Login failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const { name, email, password, phone } = userData;\n      \n      // Clear state\n      setUserInfo(null);\n      setUserToken(null);\n      setIsLoading(true);\n      \n      // Demo: Simulate API call with delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // In production, you would make an API call like:\n      // const response = await axios.post(`${API_URL}/api/users/register`, {\n      //   name, email, password, phone\n      // });\n      \n      // Demo: Check if the email is already in use\n      if (email === 'test@example.com') {\n        return {\n          success: false,\n          message: 'This email is already registered. Please use a different email or login.'\n        };\n      }\n      \n      // Demo: Create a fake user with the provided data\n      const newUser = {\n        _id: `user_${Date.now()}`,\n        name,\n        email,\n        phone: phone || null, // Store phone if provided\n        createdAt: new Date().toISOString(),\n        isPremium: false\n      };\n      \n      // In a production app, the backend would handle storing the user and sending a verification email\n      \n      return {\n        success: true,\n        data: newUser\n      };\n    } catch (error) {\n      console.log('Registration Error: ', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Registration failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      console.log('AuthContext: Starting logout process');\n      setIsLoading(true);\n      \n      // First clear the context state (do this first for better user experience)\n      console.log('AuthContext: Clearing context state...');\n      setUserToken(null);\n      setUserInfo(null);\n      \n      console.log('AuthContext: Clearing AsyncStorage...');\n      // Clear local storage - use a more direct approach that won't fail silently\n      try {\n        await AsyncStorage.removeItem('userInfo');\n        console.log('AuthContext: Removed userInfo from AsyncStorage');\n      } catch (storageError) {\n        console.error('AuthContext: Failed to remove userInfo from AsyncStorage:', storageError);\n      }\n      \n      try {\n        await AsyncStorage.removeItem('userToken');\n        console.log('AuthContext: Removed userToken from AsyncStorage');\n      } catch (storageError) {\n        console.error('AuthContext: Failed to remove userToken from AsyncStorage:', storageError);\n      }\n      \n      // Verify the items were removed\n      const checkUserInfo = await AsyncStorage.getItem('userInfo');\n      const checkUserToken = await AsyncStorage.getItem('userToken');\n      \n      if (checkUserInfo || checkUserToken) {\n        console.warn('AuthContext: Some items may not have been fully removed from AsyncStorage');\n      } else {\n        console.log('AuthContext: Successfully verified AsyncStorage items were removed');\n      }\n      \n      console.log('AuthContext: Logout successful - all user data cleared');\n      return true;\n    } catch (error) {\n      console.error('AuthContext: Logout error:', error);\n      // For UX, still clear the state even if there was an error with storage\n      setUserToken(null);\n      setUserInfo(null);\n      \n      Alert.alert('Logout Error', 'There was a problem logging out. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const upgradeToPremium = async () => {\n    setIsLoading(true);\n    try {\n      // For demo purposes, we'll just update the local state\n      // In a real app, this would:\n      // 1. Make an API call to process payment\n      // 2. If user was on trial, convert their account instead of charging them again\n      // 3. Set up recurring billing\n      \n      const wasOnTrial = userInfo?.trialActive;\n      \n      // Update the user info\n      const updatedUserInfo = {\n        ...userInfo,\n        isPremium: true,\n        premiumSince: new Date().toISOString(),\n        // If user was on trial, we want to clear the trial flags\n        trialActive: false,\n        trialStartDate: null,\n        trialEndDate: null\n      };\n      \n      setUserInfo(updatedUserInfo);\n      await AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n      \n      return {\n        success: true,\n        message: wasOnTrial \n          ? 'Your trial has been converted to a premium subscription.' \n          : 'Your account has been upgraded to premium!'\n      };\n    } catch (error) {\n      console.log('Upgrade error:', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || 'An error occurred during upgrade'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const cancelPremium = async () => {\n    setIsLoading(true);\n    try {\n      // For demo purposes, we'll just update the local state\n      // In a real app, this would:\n      // 1. Make an API call to cancel subscription\n      // 2. Properly handle cancelling trial vs actual subscription\n      \n      const wasOnTrial = userInfo?.trialActive;\n      \n      // Update the user info\n      const updatedUserInfo = {\n        ...userInfo,\n        isPremium: false,\n        premiumSince: null,\n        trialActive: false,\n        trialStartDate: null,\n        trialEndDate: null\n      };\n      \n      setUserInfo(updatedUserInfo);\n      await AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n      \n      return {\n        success: true,\n        message: wasOnTrial \n          ? 'Your free trial has been cancelled. No charges will be made.' \n          : 'Your premium subscription has been cancelled.'\n      };\n    } catch (error) {\n      console.log('Cancellation error:', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || 'An error occurred while canceling'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const isLoggedIn = async () => {\n    try {\n      setIsLoading(true);\n      let userInfo = await AsyncStorage.getItem('userInfo');\n      let userToken = await AsyncStorage.getItem('userToken');\n\n      if (userInfo) {\n        userInfo = JSON.parse(userInfo);\n        setUserInfo(userInfo);\n        setUserToken(userToken);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to check if user is logged in and redirect to login if not\n  const requireLogin = (navigation) => {\n    if (!userToken) {\n      Alert.alert(\n        'Login Required',\n        'You need to log in to access this feature',\n        [\n          {\n            text: 'Cancel',\n            style: 'cancel',\n          },\n          {\n            text: 'Login',\n            onPress: () => navigation.navigate('Login'),\n          },\n        ]\n      );\n      return false;\n    }\n    return true;\n  };\n\n  // Function to check if a phone number exists in the trial database\n  // In a real app, this would make an API call to check if the phone has been used for a trial\n  const checkPhoneEligibleForTrial = async (phone) => {\n    if (!phone || phone.trim() === '') {\n      return { \n        eligible: false, \n        message: 'Phone number is required for free trial'\n      };\n    }\n    \n    // For demo purposes, we'll always return true\n    // In production, you would check against a database\n    return { \n      eligible: true, \n      message: 'Phone number is eligible for free trial'\n    };\n  };\n\n  // Start a free trial for the current user\n  const startFreeTrial = async (phone) => {\n    try {\n      setIsLoading(true);\n      \n      // Verify phone number first\n      const phoneCheck = await checkPhoneEligibleForTrial(phone);\n      if (!phoneCheck.eligible) {\n        return {\n          success: false,\n          message: phoneCheck.message\n        };\n      }\n      \n      // In a real app, you would:\n      // 1. Make an API call to register the trial\n      // 2. Store payment method details for later billing\n      // 3. Set up a scheduled task to bill after trial period\n      \n      // Calculate trial end date (3 days from now)\n      const trialStartDate = new Date();\n      const trialEndDate = new Date();\n      trialEndDate.setDate(trialEndDate.getDate() + 3);\n      \n      // Update user info with trial information\n      const updatedUserInfo = {\n        ...userInfo,\n        trialActive: true,\n        trialStartDate: trialStartDate.toISOString(),\n        trialEndDate: trialEndDate.toISOString(),\n        phone: phone || userInfo?.phone, // Save phone if provided\n      };\n      \n      setUserInfo(updatedUserInfo);\n      await AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n      \n      return { \n        success: true, \n        message: 'Your 3-day free trial has started! You will be billed $10 after the trial period unless you cancel.',\n        trialEndDate: trialEndDate.toISOString()\n      };\n    } catch (error) {\n      console.log('Error starting trial:', error);\n      return {\n        success: false,\n        message: 'Failed to start free trial. Please try again later.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check if user's trial is still active\n  const checkTrialStatus = () => {\n    if (!userInfo?.trialActive) {\n      return { active: false };\n    }\n    \n    const now = new Date();\n    const trialEnd = new Date(userInfo.trialEndDate);\n    \n    if (now > trialEnd) {\n      return { \n        active: false,\n        expired: true,\n        message: 'Your free trial has expired. Please upgrade to continue accessing premium features.' \n      };\n    }\n    \n    // Calculate days remaining\n    const diffTime = Math.abs(trialEnd - now);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return { \n      active: true,\n      daysRemaining: diffDays,\n      trialEndDate: userInfo.trialEndDate,\n      message: `Your free trial is active. ${diffDays} days remaining.`\n    };\n  };\n\n  // Helper function to check if user can access premium features\n  const canAccessPremiumFeatures = () => {\n    if (userInfo?.isPremium) return { access: true, reason: 'premium' };\n    \n    const trialStatus = checkTrialStatus();\n    if (trialStatus.active) return { access: true, reason: 'trial' };\n    \n    return { \n      access: false, \n      reason: trialStatus.expired ? 'trial_expired' : 'not_premium' \n    };\n  };\n\n  // Get premium or trial status for UI display\n  const getUserSubscriptionStatus = () => {\n    if (!userInfo) return { status: 'guest' };\n    \n    if (userInfo.isPremium) {\n      return { \n        status: 'premium',\n        since: userInfo.premiumSince,\n        displayText: 'Premium Member'\n      };\n    }\n    \n    const trialStatus = checkTrialStatus();\n    if (trialStatus.active) {\n      return {\n        status: 'trial',\n        daysRemaining: trialStatus.daysRemaining,\n        endDate: trialStatus.trialEndDate,\n        displayText: `Trial (${trialStatus.daysRemaining} days left)`\n      };\n    }\n    \n    if (trialStatus.expired) {\n      return {\n        status: 'expired',\n        displayText: 'Trial Expired'\n      };\n    }\n    \n    return {\n      status: 'regular',\n      displayText: 'Regular Account'\n    };\n  };\n\n  const updateUserProfile = async (profileData) => {\n    try {\n      const token = await AsyncStorage.getItem('userToken');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      setIsLoading(true);\n      \n      // Prepare form data for profile image upload\n      const formData = new FormData();\n      \n      // Add other profile fields\n      formData.append('name', profileData.name || '');\n      formData.append('bio', profileData.bio || '');\n      \n      // Add interests as a JSON string\n      if (profileData.interests && profileData.interests.length > 0) {\n        formData.append('interests', JSON.stringify(profileData.interests));\n      }\n      \n      // Add profile image if it exists and is a new one (starts with file://)\n      if (profileData.profileImage && profileData.profileImage.startsWith('file://')) {\n        const uriParts = profileData.profileImage.split('.');\n        const fileType = uriParts[uriParts.length - 1];\n        \n        formData.append('profileImage', {\n          uri: profileData.profileImage,\n          name: `profile-${userInfo._id}.${fileType}`,\n          type: `image/${fileType}`\n        });\n      }\n      \n      // For demo purposes, just update the local user info\n      // In production, you would send formData to your API\n      const updatedUserInfo = {\n        ...userInfo,\n        name: profileData.name || userInfo.name,\n        bio: profileData.bio || userInfo.bio,\n        interests: profileData.interests || userInfo.interests,\n        profileImage: profileData.profileImage || userInfo.profileImage\n      };\n      \n      // Save to AsyncStorage\n      await AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n      \n      // Update state\n      setUserInfo(updatedUserInfo);\n      \n      return { success: true, message: 'Profile updated successfully' };\n    } catch (error) {\n      console.log('Error updating profile:', error);\n      return { success: false, message: error.message || 'Failed to update profile' };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    isLoggedIn();\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoading,\n        userToken,\n        userInfo,\n        login,\n        register,\n        logout,\n        upgradeToPremium,\n        cancelPremium,\n        requireLogin,\n        setUserToken,\n        setUserInfo,\n        startFreeTrial,\n        checkTrialStatus,\n        canAccessPremiumFeatures,\n        updateUserProfile,\n        getUserSubscriptionStatus\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}