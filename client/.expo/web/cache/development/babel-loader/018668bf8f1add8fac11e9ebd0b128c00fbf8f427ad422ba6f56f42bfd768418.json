{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { API_URL } from \"../config\";\nimport { login as apiLogin, register as apiRegister } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthContext = createContext();\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userToken = _useState4[0],\n    setUserToken = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    userInfo = _useState6[0],\n    setUserInfo = _useState6[1];\n  var login = function () {\n    var _ref2 = _asyncToGenerator(function* (email, password) {\n      try {\n        setIsLoading(true);\n        if (!email || !password) {\n          return {\n            success: false,\n            message: 'Please enter both email and password.'\n          };\n        }\n        try {\n          var userData = yield apiLogin({\n            email: email,\n            password: password\n          });\n          console.log('Login API response successful:', userData);\n          if (!userData.user) {\n            userData.user = {\n              _id: userData._id,\n              name: userData.name,\n              email: userData.email,\n              profileImage: userData.profileImage,\n              isPremium: userData.isPremium,\n              createdAt: userData.createdAt || new Date().toISOString()\n            };\n          }\n          if (!userData.user.createdAt) {\n            userData.user.createdAt = new Date().toISOString();\n          }\n          setUserInfo(userData.user);\n          setUserToken(userData.token);\n          yield AsyncStorage.setItem('userInfo', JSON.stringify(userData.user));\n          yield AsyncStorage.setItem('userToken', userData.token);\n          return {\n            success: true,\n            data: userData.user\n          };\n        } catch (apiError) {\n          console.log('API login error, falling back to demo mode:', apiError);\n          var isValidCredentials = email === 'user@example.com' && password === 'password' || email === 'test123@example.com' && password === 'password' || email === 'test@gmail.com' && password === 'password';\n          if (!isValidCredentials) {\n            return {\n              success: false,\n              message: 'Invalid email or password.'\n            };\n          }\n          var demoUser = {\n            _id: 'user_123',\n            name: 'Regular User',\n            email: email,\n            token: 'demo_token_' + Date.now(),\n            profileImage: null,\n            isPremium: true,\n            createdAt: new Date().toISOString(),\n            bio: 'Demo user profile',\n            phone: '555-123-4567'\n          };\n          if (email === 'test123@example.com') {\n            demoUser = _objectSpread(_objectSpread({}, demoUser), {}, {\n              _id: 'user_test123',\n              name: 'Test 123',\n              email: 'test123@example.com'\n            });\n          }\n          if (email === 'test@gmail.com') {\n            demoUser = _objectSpread(_objectSpread({}, demoUser), {}, {\n              _id: 'user_gmail',\n              name: 'Test Gmail',\n              email: 'test@gmail.com'\n            });\n          }\n          setUserInfo(demoUser);\n          setUserToken(demoUser.token);\n          yield AsyncStorage.setItem('userInfo', JSON.stringify(demoUser));\n          yield AsyncStorage.setItem('userToken', demoUser.token);\n          console.log('Login successful (demo mode):', demoUser.name);\n          return {\n            success: true,\n            data: demoUser\n          };\n        }\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.log('Login error:', error);\n        return {\n          success: false,\n          message: ((_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.message) || 'Login failed. Please try again.'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function login(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var register = function () {\n    var _ref3 = _asyncToGenerator(function* (userData) {\n      try {\n        setUserInfo(null);\n        setUserToken(null);\n        setIsLoading(true);\n        try {\n          var response = yield apiRegister(userData);\n          console.log('Registration API response successful:', response);\n          var user = response.user || response;\n          if (!user.createdAt) {\n            user.createdAt = new Date().toISOString();\n          }\n          setUserInfo(user);\n          setUserToken(response.token);\n          yield AsyncStorage.setItem('userInfo', JSON.stringify(user));\n          yield AsyncStorage.setItem('userToken', response.token);\n          return {\n            success: true,\n            data: {\n              user: user,\n              token: response.token\n            }\n          };\n        } catch (apiError) {\n          console.log('API registration error, falling back to demo mode:', apiError);\n          if (userData.email === 'test@example.com') {\n            return {\n              success: false,\n              message: 'This email is already registered. Please use a different email or login.'\n            };\n          }\n          var newUser = {\n            _id: `user_${Date.now()}`,\n            name: userData.name,\n            email: userData.email,\n            phone: userData.phone || null,\n            createdAt: new Date().toISOString(),\n            isPremium: false\n          };\n          return {\n            success: true,\n            data: newUser\n          };\n        }\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        console.log('Registration Error: ', error);\n        return {\n          success: false,\n          message: ((_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || 'Registration failed. Please try again.'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function register(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var logout = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        console.log('AuthContext: Starting logout process');\n        setIsLoading(true);\n        console.log('AuthContext: Clearing context state...');\n        setUserToken(null);\n        setUserInfo(null);\n        console.log('AuthContext: Clearing AsyncStorage...');\n        try {\n          yield AsyncStorage.removeItem('userInfo');\n          console.log('AuthContext: Removed userInfo from AsyncStorage');\n        } catch (storageError) {\n          console.error('AuthContext: Failed to remove userInfo from AsyncStorage:', storageError);\n        }\n        try {\n          yield AsyncStorage.removeItem('userToken');\n          console.log('AuthContext: Removed userToken from AsyncStorage');\n        } catch (storageError) {\n          console.error('AuthContext: Failed to remove userToken from AsyncStorage:', storageError);\n        }\n        var checkUserInfo = yield AsyncStorage.getItem('userInfo');\n        var checkUserToken = yield AsyncStorage.getItem('userToken');\n        if (checkUserInfo || checkUserToken) {\n          console.warn('AuthContext: Some items may not have been fully removed from AsyncStorage');\n        } else {\n          console.log('AuthContext: Successfully verified AsyncStorage items were removed');\n        }\n        console.log('AuthContext: Logout successful - all user data cleared');\n        return true;\n      } catch (error) {\n        console.error('AuthContext: Logout error:', error);\n        setUserToken(null);\n        setUserInfo(null);\n        Alert.alert('Logout Error', 'There was a problem logging out. Please try again.');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function logout() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var upgradeToPremium = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      setIsLoading(true);\n      try {\n        var wasOnTrial = userInfo == null ? void 0 : userInfo.trialActive;\n        var updatedUserInfo = _objectSpread(_objectSpread({}, userInfo), {}, {\n          isPremium: true,\n          premiumSince: new Date().toISOString(),\n          trialActive: false,\n          trialStartDate: null,\n          trialEndDate: null\n        });\n        setUserInfo(updatedUserInfo);\n        yield AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        return {\n          success: true,\n          message: wasOnTrial ? 'Your trial has been converted to a premium subscription.' : 'Your account has been upgraded to premium!'\n        };\n      } catch (error) {\n        var _error$response3, _error$response3$data;\n        console.log('Upgrade error:', error);\n        return {\n          success: false,\n          message: ((_error$response3 = error.response) == null ? void 0 : (_error$response3$data = _error$response3.data) == null ? void 0 : _error$response3$data.message) || 'An error occurred during upgrade'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function upgradeToPremium() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var cancelPremium = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      setIsLoading(true);\n      try {\n        var wasOnTrial = userInfo == null ? void 0 : userInfo.trialActive;\n        var updatedUserInfo = _objectSpread(_objectSpread({}, userInfo), {}, {\n          isPremium: false,\n          premiumSince: null,\n          trialActive: false,\n          trialStartDate: null,\n          trialEndDate: null\n        });\n        setUserInfo(updatedUserInfo);\n        yield AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        return {\n          success: true,\n          message: wasOnTrial ? 'Your free trial has been cancelled. No charges will be made.' : 'Your premium subscription has been cancelled.'\n        };\n      } catch (error) {\n        var _error$response4, _error$response4$data;\n        console.log('Cancellation error:', error);\n        return {\n          success: false,\n          message: ((_error$response4 = error.response) == null ? void 0 : (_error$response4$data = _error$response4.data) == null ? void 0 : _error$response4$data.message) || 'An error occurred while canceling'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function cancelPremium() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var isLoggedIn = function () {\n    var _ref7 = _asyncToGenerator(function* () {\n      try {\n        setIsLoading(true);\n        var _userInfo = yield AsyncStorage.getItem('userInfo');\n        var _userToken = yield AsyncStorage.getItem('userToken');\n        if (_userInfo) {\n          _userInfo = JSON.parse(_userInfo);\n          setUserInfo(_userInfo);\n          setUserToken(_userToken);\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function isLoggedIn() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var requireLogin = function requireLogin(navigation) {\n    if (!userToken) {\n      Alert.alert('Login Required', 'You need to log in to access this feature', [{\n        text: 'Cancel',\n        style: 'cancel'\n      }, {\n        text: 'Login',\n        onPress: function onPress() {\n          return navigation.navigate('Login');\n        }\n      }]);\n      return false;\n    }\n    return true;\n  };\n  var checkPhoneEligibleForTrial = function () {\n    var _ref8 = _asyncToGenerator(function* (phone) {\n      if (!phone || phone.trim() === '') {\n        return {\n          eligible: false,\n          message: 'Phone number is required for free trial'\n        };\n      }\n      return {\n        eligible: true,\n        message: 'Phone number is eligible for free trial'\n      };\n    });\n    return function checkPhoneEligibleForTrial(_x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var startFreeTrial = function () {\n    var _ref9 = _asyncToGenerator(function* (phone) {\n      try {\n        setIsLoading(true);\n        var phoneCheck = yield checkPhoneEligibleForTrial(phone);\n        if (!phoneCheck.eligible) {\n          return {\n            success: false,\n            message: phoneCheck.message\n          };\n        }\n        var trialStartDate = new Date();\n        var trialEndDate = new Date();\n        trialEndDate.setDate(trialEndDate.getDate() + 3);\n        var updatedUserInfo = _objectSpread(_objectSpread({}, userInfo), {}, {\n          trialActive: true,\n          trialStartDate: trialStartDate.toISOString(),\n          trialEndDate: trialEndDate.toISOString(),\n          phone: phone || (userInfo == null ? void 0 : userInfo.phone)\n        });\n        setUserInfo(updatedUserInfo);\n        yield AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        return {\n          success: true,\n          message: 'Your 3-day free trial has started! You will be billed $10 after the trial period unless you cancel.',\n          trialEndDate: trialEndDate.toISOString()\n        };\n      } catch (error) {\n        console.log('Error starting trial:', error);\n        return {\n          success: false,\n          message: 'Failed to start free trial. Please try again later.'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function startFreeTrial(_x5) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var checkTrialStatus = function checkTrialStatus() {\n    if (!(userInfo != null && userInfo.trialActive)) {\n      return {\n        active: false\n      };\n    }\n    var now = new Date();\n    var trialEnd = new Date(userInfo.trialEndDate);\n    if (now > trialEnd) {\n      return {\n        active: false,\n        expired: true,\n        message: 'Your free trial has expired. Please upgrade to continue accessing premium features.'\n      };\n    }\n    var diffTime = Math.abs(trialEnd - now);\n    var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return {\n      active: true,\n      daysRemaining: diffDays,\n      trialEndDate: userInfo.trialEndDate,\n      message: `Your free trial is active. ${diffDays} days remaining.`\n    };\n  };\n  var canAccessPremiumFeatures = function canAccessPremiumFeatures() {\n    if (userInfo != null && userInfo.isPremium) return {\n      access: true,\n      reason: 'premium'\n    };\n    var trialStatus = checkTrialStatus();\n    if (trialStatus.active) return {\n      access: true,\n      reason: 'trial'\n    };\n    return {\n      access: false,\n      reason: trialStatus.expired ? 'trial_expired' : 'not_premium'\n    };\n  };\n  var getUserSubscriptionStatus = function getUserSubscriptionStatus() {\n    if (!userInfo) return {\n      status: 'guest'\n    };\n    if (userInfo.isPremium) {\n      return {\n        status: 'premium',\n        since: userInfo.premiumSince,\n        displayText: 'Premium Member'\n      };\n    }\n    var trialStatus = checkTrialStatus();\n    if (trialStatus.active) {\n      return {\n        status: 'trial',\n        daysRemaining: trialStatus.daysRemaining,\n        endDate: trialStatus.trialEndDate,\n        displayText: `Trial (${trialStatus.daysRemaining} days left)`\n      };\n    }\n    if (trialStatus.expired) {\n      return {\n        status: 'expired',\n        displayText: 'Trial Expired'\n      };\n    }\n    return {\n      status: 'regular',\n      displayText: 'Regular Account'\n    };\n  };\n  var updateUserProfile = function () {\n    var _ref10 = _asyncToGenerator(function* (profileData) {\n      try {\n        var token = yield AsyncStorage.getItem('userToken');\n        if (!token) {\n          throw new Error('Authentication required');\n        }\n        setIsLoading(true);\n        var formData = new FormData();\n        formData.append('name', profileData.name || '');\n        formData.append('bio', profileData.bio || '');\n        if (profileData.interests && profileData.interests.length > 0) {\n          formData.append('interests', JSON.stringify(profileData.interests));\n        }\n        if (profileData.profileImage && profileData.profileImage.startsWith('file://')) {\n          var uriParts = profileData.profileImage.split('.');\n          var fileType = uriParts[uriParts.length - 1];\n          formData.append('profileImage', {\n            uri: profileData.profileImage,\n            name: `profile-${userInfo._id}.${fileType}`,\n            type: `image/${fileType}`\n          });\n        }\n        var updatedUserInfo = _objectSpread(_objectSpread({}, userInfo), {}, {\n          name: profileData.name || userInfo.name,\n          bio: profileData.bio || userInfo.bio,\n          interests: profileData.interests || userInfo.interests,\n          profileImage: profileData.profileImage || userInfo.profileImage\n        });\n        yield AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n        setUserInfo(updatedUserInfo);\n        return {\n          success: true,\n          message: 'Profile updated successfully'\n        };\n      } catch (error) {\n        console.log('Error updating profile:', error);\n        return {\n          success: false,\n          message: error.message || 'Failed to update profile'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function updateUserProfile(_x6) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    isLoggedIn();\n  }, []);\n  return _jsx(AuthContext.Provider, {\n    value: {\n      isLoading: isLoading,\n      userToken: userToken,\n      userInfo: userInfo,\n      login: login,\n      register: register,\n      logout: logout,\n      upgradeToPremium: upgradeToPremium,\n      cancelPremium: cancelPremium,\n      requireLogin: requireLogin,\n      setUserToken: setUserToken,\n      setUserInfo: setUserInfo,\n      startFreeTrial: startFreeTrial,\n      checkTrialStatus: checkTrialStatus,\n      canAccessPremiumFeatures: canAccessPremiumFeatures,\n      updateUserProfile: updateUserProfile,\n      getUserSubscriptionStatus: getUserSubscriptionStatus\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","AsyncStorage","axios","Alert","API_URL","login","apiLogin","register","apiRegister","jsx","_jsx","AuthContext","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","userToken","setUserToken","_useState5","_useState6","userInfo","setUserInfo","_ref2","_asyncToGenerator","email","password","success","message","userData","console","log","user","_id","name","profileImage","isPremium","createdAt","Date","toISOString","token","setItem","JSON","stringify","data","apiError","isValidCredentials","demoUser","now","bio","phone","_objectSpread","error","_error$response","_error$response$data","response","_x","_x2","apply","arguments","_ref3","newUser","_error$response2","_error$response2$data","_x3","logout","_ref4","removeItem","storageError","checkUserInfo","getItem","checkUserToken","warn","alert","upgradeToPremium","_ref5","wasOnTrial","trialActive","updatedUserInfo","premiumSince","trialStartDate","trialEndDate","_error$response3","_error$response3$data","cancelPremium","_ref6","_error$response4","_error$response4$data","isLoggedIn","_ref7","parse","requireLogin","navigation","text","style","onPress","navigate","checkPhoneEligibleForTrial","_ref8","trim","eligible","_x4","startFreeTrial","_ref9","phoneCheck","setDate","getDate","_x5","checkTrialStatus","active","trialEnd","expired","diffTime","Math","abs","diffDays","ceil","daysRemaining","canAccessPremiumFeatures","access","reason","trialStatus","getUserSubscriptionStatus","status","since","displayText","endDate","updateUserProfile","_ref10","profileData","Error","formData","FormData","append","interests","length","startsWith","uriParts","split","fileType","uri","type","_x6","Provider","value"],"sources":["/Users/handy.hasan/Documents/SportsConnect/client/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport { Alert } from 'react-native';\nimport { API_URL } from '../config';\nimport { login as apiLogin, register as apiRegister } from '../services/api';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [userToken, setUserToken] = useState(null);\n  const [userInfo, setUserInfo] = useState(null);\n\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      \n      // Validate input\n      if (!email || !password) {\n        return { success: false, message: 'Please enter both email and password.' };\n      }\n      \n      try {\n        // Make a real API call to the backend for authentication\n        const userData = await apiLogin({ email, password });\n        \n        console.log('Login API response successful:', userData);\n        \n        // Ensure user data is properly structured\n        if (!userData.user) {\n          userData.user = {\n            _id: userData._id,\n            name: userData.name,\n            email: userData.email,\n            profileImage: userData.profileImage,\n            isPremium: userData.isPremium,\n            createdAt: userData.createdAt || new Date().toISOString()\n          };\n        }\n        \n        // Ensure the user info has createdAt\n        if (!userData.user.createdAt) {\n          userData.user.createdAt = new Date().toISOString();\n        }\n        \n        // Save the user data and token\n        setUserInfo(userData.user);\n        setUserToken(userData.token);\n        \n        await AsyncStorage.setItem('userInfo', JSON.stringify(userData.user));\n        await AsyncStorage.setItem('userToken', userData.token);\n        \n        return { success: true, data: userData.user };\n      } catch (apiError) {\n        console.log('API login error, falling back to demo mode:', apiError);\n        \n        // DEMO MODE: For testing purposes only\n        // In a production app, you would remove this fallback\n        const isValidCredentials = \n          (email === 'user@example.com' && password === 'password') || \n          (email === 'test123@example.com' && password === 'password') ||\n          (email === 'test@gmail.com' && password === 'password');\n        \n        if (!isValidCredentials) {\n          return { success: false, message: 'Invalid email or password.' };\n        }\n        \n        // Create demo user based on email\n        let demoUser = {\n          _id: 'user_123',\n          name: 'Regular User',\n          email: email,\n          token: 'demo_token_' + Date.now(), // Simple token for demo\n          profileImage: null,\n          isPremium: true, // Set everyone to premium for now to enable chat\n          createdAt: new Date().toISOString(),\n          bio: 'Demo user profile',\n          phone: '555-123-4567'\n        };\n        \n        // Special case for test123 user\n        if (email === 'test123@example.com') {\n          demoUser = {\n            ...demoUser,\n            _id: 'user_test123',\n            name: 'Test 123',\n            email: 'test123@example.com',\n          };\n        }\n        \n        // Special case for test@gmail.com\n        if (email === 'test@gmail.com') {\n          demoUser = {\n            ...demoUser,\n            _id: 'user_gmail',\n            name: 'Test Gmail',\n            email: 'test@gmail.com',\n          };\n        }\n        \n        // Store user info and token\n        setUserInfo(demoUser);\n        setUserToken(demoUser.token);\n        \n        await AsyncStorage.setItem('userInfo', JSON.stringify(demoUser));\n        await AsyncStorage.setItem('userToken', demoUser.token);\n        \n        console.log('Login successful (demo mode):', demoUser.name);\n        return { success: true, data: demoUser };\n      }\n    } catch (error) {\n      console.log('Login error:', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Login failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      // Clear state\n      setUserInfo(null);\n      setUserToken(null);\n      setIsLoading(true);\n      \n      try {\n        // Try to make a real API call\n        const response = await apiRegister(userData);\n        \n        console.log('Registration API response successful:', response);\n        \n        // Ensure user data is properly structured\n        const user = response.user || response;\n        if (!user.createdAt) {\n          user.createdAt = new Date().toISOString();\n        }\n        \n        // Save the user data and token\n        setUserInfo(user);\n        setUserToken(response.token);\n        \n        await AsyncStorage.setItem('userInfo', JSON.stringify(user));\n        await AsyncStorage.setItem('userToken', response.token);\n        \n        return {\n          success: true,\n          data: {user, token: response.token}\n        };\n      } catch (apiError) {\n        console.log('API registration error, falling back to demo mode:', apiError);\n        \n        // Demo: Check if the email is already in use\n        if (userData.email === 'test@example.com') {\n          return {\n            success: false,\n            message: 'This email is already registered. Please use a different email or login.'\n          };\n        }\n        \n        // Demo: Create a fake user with the provided data\n        const newUser = {\n          _id: `user_${Date.now()}`,\n          name: userData.name,\n          email: userData.email,\n          phone: userData.phone || null, // Store phone if provided\n          createdAt: new Date().toISOString(),\n          isPremium: false\n        };\n        \n        return {\n          success: true,\n          data: newUser\n        };\n      }\n    } catch (error) {\n      console.log('Registration Error: ', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Registration failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      console.log('AuthContext: Starting logout process');\n      setIsLoading(true);\n      \n      // First clear the context state (do this first for better user experience)\n      console.log('AuthContext: Clearing context state...');\n      setUserToken(null);\n      setUserInfo(null);\n      \n      console.log('AuthContext: Clearing AsyncStorage...');\n      // Clear local storage - use a more direct approach that won't fail silently\n      try {\n        await AsyncStorage.removeItem('userInfo');\n        console.log('AuthContext: Removed userInfo from AsyncStorage');\n      } catch (storageError) {\n        console.error('AuthContext: Failed to remove userInfo from AsyncStorage:', storageError);\n      }\n      \n      try {\n        await AsyncStorage.removeItem('userToken');\n        console.log('AuthContext: Removed userToken from AsyncStorage');\n      } catch (storageError) {\n        console.error('AuthContext: Failed to remove userToken from AsyncStorage:', storageError);\n      }\n      \n      // Verify the items were removed\n      const checkUserInfo = await AsyncStorage.getItem('userInfo');\n      const checkUserToken = await AsyncStorage.getItem('userToken');\n      \n      if (checkUserInfo || checkUserToken) {\n        console.warn('AuthContext: Some items may not have been fully removed from AsyncStorage');\n      } else {\n        console.log('AuthContext: Successfully verified AsyncStorage items were removed');\n      }\n      \n      console.log('AuthContext: Logout successful - all user data cleared');\n      return true;\n    } catch (error) {\n      console.error('AuthContext: Logout error:', error);\n      // For UX, still clear the state even if there was an error with storage\n      setUserToken(null);\n      setUserInfo(null);\n      \n      Alert.alert('Logout Error', 'There was a problem logging out. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const upgradeToPremium = async () => {\n    setIsLoading(true);\n    try {\n      // For demo purposes, we'll just update the local state\n      // In a real app, this would:\n      // 1. Make an API call to process payment\n      // 2. If user was on trial, convert their account instead of charging them again\n      // 3. Set up recurring billing\n      \n      const wasOnTrial = userInfo?.trialActive;\n      \n      // Update the user info\n      const updatedUserInfo = {\n        ...userInfo,\n        isPremium: true,\n        premiumSince: new Date().toISOString(),\n        // If user was on trial, we want to clear the trial flags\n        trialActive: false,\n        trialStartDate: null,\n        trialEndDate: null\n      };\n      \n      setUserInfo(updatedUserInfo);\n      await AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n      \n      return {\n        success: true,\n        message: wasOnTrial \n          ? 'Your trial has been converted to a premium subscription.' \n          : 'Your account has been upgraded to premium!'\n      };\n    } catch (error) {\n      console.log('Upgrade error:', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || 'An error occurred during upgrade'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const cancelPremium = async () => {\n    setIsLoading(true);\n    try {\n      // For demo purposes, we'll just update the local state\n      // In a real app, this would:\n      // 1. Make an API call to cancel subscription\n      // 2. Properly handle cancelling trial vs actual subscription\n      \n      const wasOnTrial = userInfo?.trialActive;\n      \n      // Update the user info\n      const updatedUserInfo = {\n        ...userInfo,\n        isPremium: false,\n        premiumSince: null,\n        trialActive: false,\n        trialStartDate: null,\n        trialEndDate: null\n      };\n      \n      setUserInfo(updatedUserInfo);\n      await AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n      \n      return {\n        success: true,\n        message: wasOnTrial \n          ? 'Your free trial has been cancelled. No charges will be made.' \n          : 'Your premium subscription has been cancelled.'\n      };\n    } catch (error) {\n      console.log('Cancellation error:', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || 'An error occurred while canceling'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const isLoggedIn = async () => {\n    try {\n      setIsLoading(true);\n      let userInfo = await AsyncStorage.getItem('userInfo');\n      let userToken = await AsyncStorage.getItem('userToken');\n\n      if (userInfo) {\n        userInfo = JSON.parse(userInfo);\n        setUserInfo(userInfo);\n        setUserToken(userToken);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to check if user is logged in and redirect to login if not\n  const requireLogin = (navigation) => {\n    if (!userToken) {\n      Alert.alert(\n        'Login Required',\n        'You need to log in to access this feature',\n        [\n          {\n            text: 'Cancel',\n            style: 'cancel',\n          },\n          {\n            text: 'Login',\n            onPress: () => navigation.navigate('Login'),\n          },\n        ]\n      );\n      return false;\n    }\n    return true;\n  };\n\n  // Function to check if a phone number exists in the trial database\n  // In a real app, this would make an API call to check if the phone has been used for a trial\n  const checkPhoneEligibleForTrial = async (phone) => {\n    if (!phone || phone.trim() === '') {\n      return { \n        eligible: false, \n        message: 'Phone number is required for free trial'\n      };\n    }\n    \n    // For demo purposes, we'll always return true\n    // In production, you would check against a database\n    return { \n      eligible: true, \n      message: 'Phone number is eligible for free trial'\n    };\n  };\n\n  // Start a free trial for the current user\n  const startFreeTrial = async (phone) => {\n    try {\n      setIsLoading(true);\n      \n      // Verify phone number first\n      const phoneCheck = await checkPhoneEligibleForTrial(phone);\n      if (!phoneCheck.eligible) {\n        return {\n          success: false,\n          message: phoneCheck.message\n        };\n      }\n      \n      // In a real app, you would:\n      // 1. Make an API call to register the trial\n      // 2. Store payment method details for later billing\n      // 3. Set up a scheduled task to bill after trial period\n      \n      // Calculate trial end date (3 days from now)\n      const trialStartDate = new Date();\n      const trialEndDate = new Date();\n      trialEndDate.setDate(trialEndDate.getDate() + 3);\n      \n      // Update user info with trial information\n      const updatedUserInfo = {\n        ...userInfo,\n        trialActive: true,\n        trialStartDate: trialStartDate.toISOString(),\n        trialEndDate: trialEndDate.toISOString(),\n        phone: phone || userInfo?.phone, // Save phone if provided\n      };\n      \n      setUserInfo(updatedUserInfo);\n      await AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n      \n      return { \n        success: true, \n        message: 'Your 3-day free trial has started! You will be billed $10 after the trial period unless you cancel.',\n        trialEndDate: trialEndDate.toISOString()\n      };\n    } catch (error) {\n      console.log('Error starting trial:', error);\n      return {\n        success: false,\n        message: 'Failed to start free trial. Please try again later.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check if user's trial is still active\n  const checkTrialStatus = () => {\n    if (!userInfo?.trialActive) {\n      return { active: false };\n    }\n    \n    const now = new Date();\n    const trialEnd = new Date(userInfo.trialEndDate);\n    \n    if (now > trialEnd) {\n      return { \n        active: false,\n        expired: true,\n        message: 'Your free trial has expired. Please upgrade to continue accessing premium features.' \n      };\n    }\n    \n    // Calculate days remaining\n    const diffTime = Math.abs(trialEnd - now);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return { \n      active: true,\n      daysRemaining: diffDays,\n      trialEndDate: userInfo.trialEndDate,\n      message: `Your free trial is active. ${diffDays} days remaining.`\n    };\n  };\n\n  // Helper function to check if user can access premium features\n  const canAccessPremiumFeatures = () => {\n    if (userInfo?.isPremium) return { access: true, reason: 'premium' };\n    \n    const trialStatus = checkTrialStatus();\n    if (trialStatus.active) return { access: true, reason: 'trial' };\n    \n    return { \n      access: false, \n      reason: trialStatus.expired ? 'trial_expired' : 'not_premium' \n    };\n  };\n\n  // Get premium or trial status for UI display\n  const getUserSubscriptionStatus = () => {\n    if (!userInfo) return { status: 'guest' };\n    \n    if (userInfo.isPremium) {\n      return { \n        status: 'premium',\n        since: userInfo.premiumSince,\n        displayText: 'Premium Member'\n      };\n    }\n    \n    const trialStatus = checkTrialStatus();\n    if (trialStatus.active) {\n      return {\n        status: 'trial',\n        daysRemaining: trialStatus.daysRemaining,\n        endDate: trialStatus.trialEndDate,\n        displayText: `Trial (${trialStatus.daysRemaining} days left)`\n      };\n    }\n    \n    if (trialStatus.expired) {\n      return {\n        status: 'expired',\n        displayText: 'Trial Expired'\n      };\n    }\n    \n    return {\n      status: 'regular',\n      displayText: 'Regular Account'\n    };\n  };\n\n  const updateUserProfile = async (profileData) => {\n    try {\n      const token = await AsyncStorage.getItem('userToken');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      setIsLoading(true);\n      \n      // Prepare form data for profile image upload\n      const formData = new FormData();\n      \n      // Add other profile fields\n      formData.append('name', profileData.name || '');\n      formData.append('bio', profileData.bio || '');\n      \n      // Add interests as a JSON string\n      if (profileData.interests && profileData.interests.length > 0) {\n        formData.append('interests', JSON.stringify(profileData.interests));\n      }\n      \n      // Add profile image if it exists and is a new one (starts with file://)\n      if (profileData.profileImage && profileData.profileImage.startsWith('file://')) {\n        const uriParts = profileData.profileImage.split('.');\n        const fileType = uriParts[uriParts.length - 1];\n        \n        formData.append('profileImage', {\n          uri: profileData.profileImage,\n          name: `profile-${userInfo._id}.${fileType}`,\n          type: `image/${fileType}`\n        });\n      }\n      \n      // For demo purposes, just update the local user info\n      // In production, you would send formData to your API\n      const updatedUserInfo = {\n        ...userInfo,\n        name: profileData.name || userInfo.name,\n        bio: profileData.bio || userInfo.bio,\n        interests: profileData.interests || userInfo.interests,\n        profileImage: profileData.profileImage || userInfo.profileImage\n      };\n      \n      // Save to AsyncStorage\n      await AsyncStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\n      \n      // Update state\n      setUserInfo(updatedUserInfo);\n      \n      return { success: true, message: 'Profile updated successfully' };\n    } catch (error) {\n      console.log('Error updating profile:', error);\n      return { success: false, message: error.message || 'Failed to update profile' };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    isLoggedIn();\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoading,\n        userToken,\n        userInfo,\n        login,\n        register,\n        logout,\n        upgradeToPremium,\n        cancelPremium,\n        requireLogin,\n        setUserToken,\n        setUserInfo,\n        startFreeTrial,\n        checkTrialStatus,\n        canAccessPremiumFeatures,\n        updateUserProfile,\n        getUserSubscriptionStatus\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}