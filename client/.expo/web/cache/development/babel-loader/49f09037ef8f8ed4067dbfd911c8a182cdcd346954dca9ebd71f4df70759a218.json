{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { DUMMY_POSTS, API_URL } from \"../config\";\nexport var checkServerConnection = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      console.log(`Checking server connection to ${API_URL}...`);\n      var response = yield axios.get(`${API_URL}/api/health`, {\n        timeout: 5000\n      });\n      console.log('Server is online:', response.status);\n      return true;\n    } catch (error) {\n      console.log('Server connection failed:', error.message);\n      return false;\n    }\n  });\n  return function checkServerConnection() {\n    return _ref.apply(this, arguments);\n  };\n}();\ncheckServerConnection();\nexport var fetchPosts = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var response = yield axios.get(`${API_URL}/api/posts`);\n      return response.data;\n    } catch (error) {\n      console.log('Error fetching posts:', error);\n      return DUMMY_POSTS;\n    }\n  });\n  return function fetchPosts() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchPostById = function () {\n  var _ref3 = _asyncToGenerator(function* (id) {\n    try {\n      var response = yield axios.get(`${API_URL}/api/posts/${id}`);\n      return response.data;\n    } catch (error) {\n      console.log('Error fetching post:', error);\n      return DUMMY_POSTS.find(function (post) {\n        return post._id === id;\n      });\n    }\n  });\n  return function fetchPostById(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var createPost = function () {\n  var _ref4 = _asyncToGenerator(function* (postData) {\n    try {\n      var token = yield AsyncStorage.getItem('userToken');\n      if (!token) {\n        console.log('No auth token found! User is not logged in.');\n        throw new Error('Authentication required. Please log in.');\n      }\n      console.log('Creating post with token:', token ? 'Token exists' : 'No token');\n      var finalPostData = _objectSpread({}, postData);\n      if (postData.image && postData.image.startsWith('file://')) {\n        console.log('Local image detected, will need to handle file upload');\n        finalPostData.image = 'https://images.unsplash.com/photo-1517649763962-0c623066013b?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80';\n      }\n      var config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        }\n      };\n      console.log(`Sending POST request to ${API_URL}/api/posts`);\n      var response = yield axios.post(`${API_URL}/api/posts`, finalPostData, config);\n      console.log('Post creation successful:', response.status);\n      return response.data;\n    } catch (error) {\n      console.log('Error creating post:', error);\n      if (error.response) {\n        console.log('Server responded with error:', error.response.status);\n        console.log('Error data:', error.response.data);\n      } else if (error.request) {\n        console.log('No response received from server. Request:', error.request);\n      } else {\n        console.log('Error setting up request:', error.message);\n      }\n      throw error;\n    }\n  });\n  return function createPost(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getUserPosts = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    try {\n      var token = yield AsyncStorage.getItem('userToken');\n      var config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      var response = yield axios.get(`${API_URL}/api/posts/user/posts`, config);\n      return response.data;\n    } catch (error) {\n      console.log('Error fetching user posts:', error);\n      return [];\n    }\n  });\n  return function getUserPosts() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getConversationsList = function () {\n  var _ref6 = _asyncToGenerator(function* () {\n    try {\n      var token = yield AsyncStorage.getItem('userToken');\n      var config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      var response = yield axios.get(`${API_URL}/api/messages`, config);\n      return response.data;\n    } catch (error) {\n      console.log('Error fetching messages:', error);\n      return [];\n    }\n  });\n  return function getConversationsList() {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var sendDirectMessage = function () {\n  var _ref7 = _asyncToGenerator(function* (messageData) {\n    try {\n      var token = yield AsyncStorage.getItem('userToken');\n      var config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        }\n      };\n      var response = yield axios.post(`${API_URL}/api/messages`, messageData, config);\n      return response.data;\n    } catch (error) {\n      console.log('Error sending message:', error);\n      throw error;\n    }\n  });\n  return function sendDirectMessage(_x3) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var deletePost = function () {\n  var _ref8 = _asyncToGenerator(function* (postId) {\n    try {\n      console.log(`Attempting to delete post with ID: ${postId}`);\n      var token = yield AsyncStorage.getItem('userToken');\n      if (!token) {\n        console.error('No authentication token found. User must be logged in to delete posts.');\n        throw new Error('Authentication required. Please log in to delete this post.');\n      }\n      var config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      console.log(`Sending DELETE request to ${API_URL}/api/posts/${postId}`);\n      var response = yield axios.delete(`${API_URL}/api/posts/${postId}`, config);\n      console.log('Delete post response:', response.status, response.data);\n      console.log('Post deletion successful');\n      return {\n        success: true,\n        message: 'Post deleted successfully',\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Error deleting post:', error.message);\n      if (error.response) {\n        console.error('Server error response:', error.response.status, error.response.data);\n        throw new Error(error.response.data.message || 'Server error while deleting post');\n      } else if (error.request) {\n        console.error('No response received:', error.request);\n        console.log('No server response, but simulating successful deletion for UI purposes');\n        return {\n          success: true,\n          message: 'Post removed from view (demo mode)',\n          simulated: true\n        };\n      } else {\n        console.error('Error setting up delete request:', error.message);\n        throw error;\n      }\n    }\n  });\n  return function deletePost(_x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var getConversations = function () {\n  var _ref9 = _asyncToGenerator(function* () {\n    try {\n      var token = yield AsyncStorage.getItem('userToken');\n      if (!token) {\n        console.error('No authentication token found. User must be logged in to view conversations.');\n        throw new Error('Authentication required. Please log in to view conversations.');\n      }\n      var config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      var response = yield axios.get(`${API_URL}/api/messages/conversations`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching conversations:', error.message);\n      return [];\n    }\n  });\n  return function getConversations() {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var getMessages = function () {\n  var _ref10 = _asyncToGenerator(function* (recipientId) {\n    try {\n      var token = yield AsyncStorage.getItem('userToken');\n      var response = yield axios.get(`${API_URL}/api/messages/${recipientId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response;\n      console.log('Error fetching messages:', error);\n      var mockMessages = [{\n        _id: `mock-${Date.now()}-1`,\n        content: `This is a demo conversation. The real API returned a ${((_error$response = error.response) == null ? void 0 : _error$response.status) || 'unknown'} error.`,\n        createdAt: new Date(Date.now() - 300000),\n        sender: {\n          _id: recipientId,\n          name: 'Demo User'\n        }\n      }, {\n        _id: `mock-${Date.now()}-2`,\n        content: \"You can type messages below to simulate a conversation.\",\n        createdAt: new Date(Date.now() - 120000),\n        sender: {\n          _id: 'system',\n          name: 'System'\n        }\n      }];\n      return {\n        success: true,\n        data: mockMessages,\n        simulated: true\n      };\n    }\n  });\n  return function getMessages(_x5) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nexport var sendMessage = function () {\n  var _ref11 = _asyncToGenerator(function* (recipientId, postId, text) {\n    var replyToId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    try {\n      var token = yield AsyncStorage.getItem('userToken');\n      if (!token) {\n        console.error('No authentication token found. User must be logged in to send messages.');\n        throw new Error('Authentication required. Please log in to send messages.');\n      }\n      var config = {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      };\n      var messageData = {\n        recipientId: recipientId,\n        postId: postId,\n        text: text,\n        replyToId: replyToId\n      };\n      var response = yield axios.post(`${API_URL}/api/messages`, messageData, config);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error sending message:', error.message);\n      if (error.request && !error.response) {\n        return {\n          success: true,\n          simulated: true,\n          data: {\n            _id: 'demo' + Date.now(),\n            text: text,\n            createdAt: new Date(),\n            user: {\n              _id: 'currentUser'\n            },\n            recipientId: recipientId,\n            postId: postId,\n            replyToId: replyToId\n          }\n        };\n      }\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || 'Failed to send message. Please try again.'\n      };\n    }\n  });\n  return function sendMessage(_x6, _x7, _x8) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nexport var deleteMessage = function () {\n  var _ref12 = _asyncToGenerator(function* (messageId) {\n    try {\n      var token = yield AsyncStorage.getItem('userToken');\n      if (!token) {\n        console.error('No authentication token found. User must be logged in to delete messages.');\n        throw new Error('Authentication required. Please log in to delete messages.');\n      }\n      var config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      var response = yield axios.delete(`${API_URL}/api/messages/${messageId}`, config);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error deleting message:', error.message);\n      if (error.request && !error.response) {\n        return {\n          success: true,\n          simulated: true,\n          message: 'Message deleted successfully (simulated)'\n        };\n      }\n      return {\n        success: false,\n        message: ((_error$response3 = error.response) == null ? void 0 : (_error$response3$data = _error$response3.data) == null ? void 0 : _error$response3$data.message) || 'Failed to delete message. Please try again.'\n      };\n    }\n  });\n  return function deleteMessage(_x9) {\n    return _ref12.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","AsyncStorage","DUMMY_POSTS","API_URL","checkServerConnection","_ref","_asyncToGenerator","console","log","response","get","timeout","status","error","message","apply","arguments","fetchPosts","_ref2","data","fetchPostById","_ref3","id","find","post","_id","_x","createPost","_ref4","postData","token","getItem","Error","finalPostData","_objectSpread","image","startsWith","config","headers","Authorization","request","_x2","getUserPosts","_ref5","getConversationsList","_ref6","sendDirectMessage","_ref7","messageData","_x3","deletePost","_ref8","postId","delete","success","simulated","_x4","getConversations","_ref9","getMessages","_ref10","recipientId","_error$response","mockMessages","Date","now","content","createdAt","sender","name","_x5","sendMessage","_ref11","text","replyToId","length","undefined","_error$response2","_error$response2$data","user","_x6","_x7","_x8","deleteMessage","_ref12","messageId","_error$response3","_error$response3$data","_x9"],"sources":["/app/client/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { DUMMY_POSTS, API_URL } from '../config';\n\n// Check if the server is accessible\nexport const checkServerConnection = async () => {\n  try {\n    console.log(`Checking server connection to ${API_URL}...`);\n    const response = await axios.get(`${API_URL}/api/health`, { timeout: 5000 });\n    console.log('Server is online:', response.status);\n    return true;\n  } catch (error) {\n    console.log('Server connection failed:', error.message);\n    return false;\n  }\n};\n\n// Run server connection check when this module loads\ncheckServerConnection();\n\n// Posts API\n\nexport const fetchPosts = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/posts`);\n    return response.data;\n  } catch (error) {\n    console.log('Error fetching posts:', error);\n    return DUMMY_POSTS;\n  }\n};\n\nexport const fetchPostById = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/api/posts/${id}`);\n    return response.data;\n  } catch (error) {\n    console.log('Error fetching post:', error);\n    return DUMMY_POSTS.find(post => post._id === id);\n  }\n};\n\nexport const createPost = async (postData) => {\n  try {\n    const token = await AsyncStorage.getItem('userToken');\n    if (!token) {\n      console.log('No auth token found! User is not logged in.');\n      throw new Error('Authentication required. Please log in.');\n    }\n\n    console.log('Creating post with token:', token ? 'Token exists' : 'No token');\n    \n    // Check if we have a local image that needs to be uploaded\n    let finalPostData = { ...postData };\n    \n    if (postData.image && postData.image.startsWith('file://')) {\n      console.log('Local image detected, will need to handle file upload');\n      // For now, we'll just use a remote URL as placeholder\n      // In a production app, you would implement proper file upload here\n      finalPostData.image = 'https://images.unsplash.com/photo-1517649763962-0c623066013b?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80';\n    }\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    \n    console.log(`Sending POST request to ${API_URL}/api/posts`);\n    const response = await axios.post(`${API_URL}/api/posts`, finalPostData, config);\n    console.log('Post creation successful:', response.status);\n    return response.data;\n  } catch (error) {\n    console.log('Error creating post:', error);\n    if (error.response) {\n      console.log('Server responded with error:', error.response.status);\n      console.log('Error data:', error.response.data);\n    } else if (error.request) {\n      console.log('No response received from server. Request:', error.request);\n    } else {\n      console.log('Error setting up request:', error.message);\n    }\n    throw error;\n  }\n};\n\nexport const getUserPosts = async () => {\n  try {\n    const token = await AsyncStorage.getItem('userToken');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    const response = await axios.get(`${API_URL}/api/posts/user/posts`, config);\n    return response.data;\n  } catch (error) {\n    console.log('Error fetching user posts:', error);\n    return [];\n  }\n};\n\n// Messages API\n\nexport const getConversationsList = async () => {\n  try {\n    const token = await AsyncStorage.getItem('userToken');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    const response = await axios.get(`${API_URL}/api/messages`, config);\n    return response.data;\n  } catch (error) {\n    console.log('Error fetching messages:', error);\n    return [];\n  }\n};\n\nexport const sendDirectMessage = async (messageData) => {\n  try {\n    const token = await AsyncStorage.getItem('userToken');\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    const response = await axios.post(`${API_URL}/api/messages`, messageData, config);\n    return response.data;\n  } catch (error) {\n    console.log('Error sending message:', error);\n    throw error;\n  }\n};\n\n// Delete a post\nexport const deletePost = async (postId) => {\n  try {\n    console.log(`Attempting to delete post with ID: ${postId}`);\n    \n    // Check for authentication token\n    const token = await AsyncStorage.getItem('userToken');\n    if (!token) {\n      console.error('No authentication token found. User must be logged in to delete posts.');\n      throw new Error('Authentication required. Please log in to delete this post.');\n    }\n    \n    // Set up request headers with authentication\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    \n    // Make the delete request to the API\n    console.log(`Sending DELETE request to ${API_URL}/api/posts/${postId}`);\n    const response = await axios.delete(`${API_URL}/api/posts/${postId}`, config);\n    \n    console.log('Delete post response:', response.status, response.data);\n    \n    // For demo purposes, also remove the post from local state if using placeholders\n    // This ensures the UI stays in sync even when the backend is not available\n    \n    console.log('Post deletion successful');\n    return { success: true, message: 'Post deleted successfully', data: response.data };\n  } catch (error) {\n    console.error('Error deleting post:', error.message);\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.error('Server error response:', error.response.status, error.response.data);\n      throw new Error(error.response.data.message || 'Server error while deleting post');\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.error('No response received:', error.request);\n      \n      // For demo purposes, return success anyway to update the UI\n      console.log('No server response, but simulating successful deletion for UI purposes');\n      return { success: true, message: 'Post removed from view (demo mode)', simulated: true };\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error('Error setting up delete request:', error.message);\n      throw error;\n    }\n  }\n};\n\n// Chat API Functions\n\n// Get conversations for the current user\nexport const getConversations = async () => {\n  try {\n    const token = await AsyncStorage.getItem('userToken');\n    if (!token) {\n      console.error('No authentication token found. User must be logged in to view conversations.');\n      throw new Error('Authentication required. Please log in to view conversations.');\n    }\n    \n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    \n    const response = await axios.get(`${API_URL}/api/messages/conversations`, config);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching conversations:', error.message);\n    \n    // For demo purposes, return an empty array\n    return [];\n  }\n};\n\n// Get messages for a specific conversation\nexport const getMessages = async (recipientId) => {\n  try {\n    // Attempt actual API call\n    const token = await AsyncStorage.getItem('userToken');\n    const response = await axios.get(`${API_URL}/api/messages/${recipientId}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.log('Error fetching messages:', error);\n    \n    // Return mock data for demo purposes\n    const mockMessages = [\n      {\n        _id: `mock-${Date.now()}-1`,\n        content: `This is a demo conversation. The real API returned a ${error.response?.status || 'unknown'} error.`,\n        createdAt: new Date(Date.now() - 300000), // 5 minutes ago\n        sender: { _id: recipientId, name: 'Demo User' }\n      },\n      {\n        _id: `mock-${Date.now()}-2`,\n        content: \"You can type messages below to simulate a conversation.\",\n        createdAt: new Date(Date.now() - 120000), // 2 minutes ago\n        sender: { _id: 'system', name: 'System' }\n      }\n    ];\n    \n    return { success: true, data: mockMessages, simulated: true };\n  }\n};\n\n// Send a message to another user\nexport const sendMessage = async (recipientId, postId, text, replyToId = null) => {\n  try {\n    const token = await AsyncStorage.getItem('userToken');\n    if (!token) {\n      console.error('No authentication token found. User must be logged in to send messages.');\n      throw new Error('Authentication required. Please log in to send messages.');\n    }\n    \n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    };\n    \n    const messageData = {\n      recipientId,\n      postId,\n      text,\n      replyToId,\n    };\n    \n    const response = await axios.post(`${API_URL}/api/messages`, messageData, config);\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('Error sending message:', error.message);\n    \n    // For demo purposes\n    if (error.request && !error.response) {\n      // Simulate a successful message for demo purposes\n      return { \n        success: true, \n        simulated: true,\n        data: {\n          _id: 'demo' + Date.now(),\n          text,\n          createdAt: new Date(),\n          user: { _id: 'currentUser' },\n          recipientId,\n          postId,\n          replyToId,\n        }\n      };\n    }\n    \n    return { \n      success: false, \n      message: error.response?.data?.message || 'Failed to send message. Please try again.' \n    };\n  }\n};\n\n// Delete a single message\nexport const deleteMessage = async (messageId) => {\n  try {\n    const token = await AsyncStorage.getItem('userToken');\n    if (!token) {\n      console.error('No authentication token found. User must be logged in to delete messages.');\n      throw new Error('Authentication required. Please log in to delete messages.');\n    }\n    \n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    \n    const response = await axios.delete(`${API_URL}/api/messages/${messageId}`, config);\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('Error deleting message:', error.message);\n    \n    // For demo purposes\n    if (error.request && !error.response) {\n      // Simulate a successful deletion for demo purposes\n      return { \n        success: true, \n        simulated: true,\n        message: 'Message deleted successfully (simulated)'\n      };\n    }\n    \n    return { \n      success: false, \n      message: error.response?.data?.message || 'Failed to delete message. Please try again.' \n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}