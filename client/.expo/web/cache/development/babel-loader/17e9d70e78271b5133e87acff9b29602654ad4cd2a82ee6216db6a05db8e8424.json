{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { AuthContext } from \"../context/AuthContext\";\nimport axios from 'axios';\nimport { API_URL } from \"../config\";\nimport { getConversationsList, sendDirectMessage, getMessages } from \"../services/api\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatListScreen = function ChatListScreen(_ref) {\n  var _route$params2, _route$params6, _route$params7, _route$params8;\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _useContext = useContext(AuthContext),\n    userInfo = _useContext.userInfo,\n    requireLogin = _useContext.requireLogin;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    conversations = _useState2[0],\n    setConversations = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    refreshing = _useState6[0],\n    setRefreshing = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    showTrialModal = _useState8[0],\n    setShowTrialModal = _useState8[1];\n  var _useState9 = useState((userInfo == null ? void 0 : userInfo.phone) || ''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    phone = _useState10[0],\n    setPhone = _useState10[1];\n  var _useState11 = useState(''),\n    _useState12 = _slicedToArray(_useState11, 2),\n    phoneError = _useState12[0],\n    setPhoneError = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isStartingTrial = _useState14[0],\n    setIsStartingTrial = _useState14[1];\n  var _useState15 = useState(''),\n    _useState16 = _slicedToArray(_useState15, 2),\n    trialError = _useState16[0],\n    setTrialError = _useState16[1];\n  var requestedTrialRef = useRef(false);\n  var _useState17 = useState(false),\n    _useState18 = _slicedToArray(_useState17, 2),\n    showComposeModal = _useState18[0],\n    setShowComposeModal = _useState18[1];\n  var _useState19 = useState(''),\n    _useState20 = _slicedToArray(_useState19, 2),\n    newMessage = _useState20[0],\n    setNewMessage = _useState20[1];\n  var _useState21 = useState(null),\n    _useState22 = _slicedToArray(_useState21, 2),\n    selectedUser = _useState22[0],\n    setSelectedUser = _useState22[1];\n  var _useState23 = useState(null),\n    _useState24 = _slicedToArray(_useState23, 2),\n    selectedPost = _useState24[0],\n    setSelectedPost = _useState24[1];\n  useEffect(function () {\n    var unsubscribe = navigation.addListener('focus', function () {\n      if (userInfo) {\n        fetchConversations();\n      }\n    });\n    return unsubscribe;\n  }, [navigation, route]);\n  useEffect(function () {\n    var _route$params;\n    if ((_route$params = route.params) != null && _route$params.messageUpdated && userInfo) {\n      console.log('Message update detected, refreshing conversations');\n      fetchConversations();\n      navigation.setParams({\n        messageUpdated: undefined\n      });\n    }\n  }, [(_route$params2 = route.params) == null ? void 0 : _route$params2.messageUpdated]);\n  useEffect(function () {\n    var _route$params3, _route$params4, _route$params5;\n    if ((_route$params3 = route.params) != null && _route$params3.selectedUser && (_route$params4 = route.params) != null && _route$params4.selectedPost && (_route$params5 = route.params) != null && _route$params5.showComposeMessage) {\n      setSelectedUser(route.params.selectedUser);\n      setSelectedPost(route.params.selectedPost);\n      setShowComposeModal(true);\n    }\n  }, [(_route$params6 = route.params) == null ? void 0 : _route$params6.selectedUser, (_route$params7 = route.params) == null ? void 0 : _route$params7.selectedPost, (_route$params8 = route.params) == null ? void 0 : _route$params8.showComposeMessage]);\n  useEffect(function () {\n    if (userInfo) {\n      fetchConversations();\n    }\n  }, [userInfo]);\n  var checkAccess = function checkAccess() {\n    return !!userInfo;\n  };\n  var fetchConversations = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        try {\n          console.log('Attempting to fetch conversations from API...');\n          var apiConversations = yield getConversationsList();\n          if (apiConversations && apiConversations.length > 0) {\n            console.log('Successfully fetched conversations from API');\n            var formattedConversations = apiConversations.map(function (conversation) {\n              if (!conversation.user || !conversation.lastMessage || !conversation.post) {\n                console.log('Conversation has incomplete data:', conversation);\n                return null;\n              }\n              return {\n                _id: `${conversation.user._id}_${conversation.post._id}`,\n                user: conversation.user,\n                post: conversation.post,\n                lastMessage: conversation.lastMessage,\n                messages: conversation.messages || [conversation.lastMessage],\n                unreadCount: conversation.unreadCount || 0\n              };\n            }).filter(Boolean);\n            formattedConversations.sort(function (a, b) {\n              var _b$lastMessage, _a$lastMessage;\n              return new Date((_b$lastMessage = b.lastMessage) == null ? void 0 : _b$lastMessage.createdAt) - new Date((_a$lastMessage = a.lastMessage) == null ? void 0 : _a$lastMessage.createdAt);\n            });\n            console.log('Formatted conversations:', formattedConversations.length);\n            setConversations(formattedConversations);\n            setLoading(false);\n            setRefreshing(false);\n            return;\n          }\n        } catch (apiError) {\n          console.log('Error fetching from API, falling back to local storage:', apiError);\n        }\n        try {\n          var savedConversations = yield AsyncStorage.getItem('demo_conversations');\n          if (savedConversations) {\n            try {\n              var parsedConversations = JSON.parse(savedConversations);\n              if (parsedConversations && Array.isArray(parsedConversations) && parsedConversations.length > 0) {\n                var validConversations = parsedConversations.filter(function (conv) {\n                  return conv && conv.user && conv.user._id && conv.post && conv.post._id;\n                });\n                setConversations(validConversations);\n                setLoading(false);\n                setRefreshing(false);\n                return;\n              }\n            } catch (parseError) {\n              console.log('Error parsing saved conversations:', parseError);\n            }\n          }\n        } catch (storageError) {\n          console.log('Error accessing local storage:', storageError);\n        }\n        var demoConversations = [{\n          _id: 'demo1',\n          user: {\n            _id: 'user1',\n            name: 'John Doe',\n            profileImage: 'https://randomuser.me/api/portraits/men/32.jpg'\n          },\n          lastMessage: {\n            content: 'This is a demo conversation.',\n            createdAt: new Date(),\n            sender: {\n              _id: 'user1',\n              name: 'John Doe'\n            },\n            recipient: {\n              _id: userInfo._id,\n              name: userInfo.name\n            }\n          },\n          post: {\n            _id: 'post1',\n            title: 'Basketball game this weekend'\n          },\n          unreadCount: 1,\n          messages: [{\n            _id: `msg_${Date.now()}`,\n            content: 'This is a demo conversation.',\n            createdAt: new Date(),\n            sender: {\n              _id: 'user1',\n              name: 'John Doe'\n            },\n            recipient: {\n              _id: userInfo._id,\n              name: userInfo.name\n            },\n            post: {\n              _id: 'post1',\n              title: 'Basketball game this weekend'\n            }\n          }]\n        }];\n        setConversations(demoConversations);\n        yield AsyncStorage.setItem('demo_conversations', JSON.stringify(demoConversations));\n      } catch (error) {\n        console.log('Error fetching conversations:', error);\n        Alert.alert('Error', 'Failed to load conversations. Please try again later.');\n      } finally {\n        setLoading(false);\n        setRefreshing(false);\n      }\n    });\n    return function fetchConversations() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleRefresh = function handleRefresh() {\n    setRefreshing(true);\n    fetchConversations();\n  };\n  var goToChat = function () {\n    var _ref3 = _asyncToGenerator(function* (conversation) {\n      if (!conversation || !conversation.user || !conversation.post) {\n        console.log('Invalid conversation object:', conversation);\n        Alert.alert('Error', 'Cannot open this conversation. Data is incomplete.');\n        return;\n      }\n      if (!conversation.user._id || !conversation.post._id) {\n        console.log('Conversation has missing _id properties:', conversation);\n        Alert.alert('Error', 'Cannot open this conversation. ID information is missing.');\n        return;\n      }\n      setSelectedUser(conversation.user);\n      setSelectedPost(conversation.post);\n      setNewMessage('');\n      try {\n        try {\n          console.log('Fetching messages for conversation with:', conversation.user._id);\n          var response = yield getMessages(conversation.user._id);\n          if (response.success && response.data && response.data.length > 0) {\n            var existingConvIndex = conversations.findIndex(function (c) {\n              return c._id === conversation._id;\n            });\n            if (existingConvIndex !== -1) {\n              var updatedConversations = _toConsumableArray(conversations);\n              updatedConversations[existingConvIndex].messages = response.data;\n              setConversations(updatedConversations);\n            }\n          }\n        } catch (apiError) {\n          console.log('Error fetching messages from API:', apiError);\n        }\n        setShowComposeModal(true);\n      } catch (error) {\n        console.log('Error in goToChat:', error);\n        setShowComposeModal(true);\n      }\n    });\n    return function goToChat(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleSendNewMessage = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      if (!newMessage.trim() || !selectedUser || !selectedPost) {\n        return;\n      }\n      var messageText = newMessage.trim();\n      setNewMessage('');\n      var tempMessage = {\n        _id: `local_msg_${Date.now()}`,\n        content: messageText,\n        createdAt: new Date().toISOString(),\n        sender: {\n          _id: userInfo._id,\n          name: userInfo.name,\n          email: userInfo.email\n        },\n        receiver: selectedUser,\n        post: selectedPost,\n        sending: true\n      };\n      try {\n        var conversationId = `${selectedUser._id}_${selectedPost._id}`;\n        var existingConvIndex = conversations.findIndex(function (c) {\n          return c.user._id === selectedUser._id && c.post._id === selectedPost._id;\n        });\n        var updatedConversations = _toConsumableArray(conversations);\n        if (existingConvIndex !== -1) {\n          updatedConversations[existingConvIndex] = _objectSpread(_objectSpread({}, updatedConversations[existingConvIndex]), {}, {\n            lastMessage: tempMessage,\n            messages: [tempMessage].concat(_toConsumableArray(updatedConversations[existingConvIndex].messages || []))\n          });\n        } else {\n          var newConversation = {\n            _id: conversationId,\n            user: selectedUser,\n            lastMessage: tempMessage,\n            messages: [tempMessage],\n            post: selectedPost,\n            unreadCount: 0\n          };\n          updatedConversations = [newConversation].concat(_toConsumableArray(updatedConversations));\n        }\n        setConversations(updatedConversations);\n        var messageData = {\n          recipient: selectedUser._id,\n          content: messageText,\n          post: selectedPost._id\n        };\n        console.log('Sending message via API:', messageData);\n        var response;\n        try {\n          response = yield sendDirectMessage(messageData);\n          console.log('API response:', response);\n          var updatedConvs = _toConsumableArray(updatedConversations);\n          var convIndex = updatedConvs.findIndex(function (c) {\n            return c.user._id === selectedUser._id && c.post._id === selectedPost._id;\n          });\n          if (convIndex !== -1) {\n            updatedConvs[convIndex].lastMessage = _objectSpread(_objectSpread({}, response), {}, {\n              sender: {\n                _id: userInfo._id,\n                name: userInfo.name,\n                email: userInfo.email\n              },\n              receiver: selectedUser,\n              post: selectedPost\n            });\n            var msgIndex = updatedConvs[convIndex].messages.findIndex(function (msg) {\n              return msg._id === tempMessage._id;\n            });\n            if (msgIndex !== -1) {\n              updatedConvs[convIndex].messages[msgIndex] = _objectSpread(_objectSpread({}, response), {}, {\n                sender: {\n                  _id: userInfo._id,\n                  name: userInfo.name,\n                  email: userInfo.email\n                },\n                receiver: selectedUser,\n                post: selectedPost\n              });\n            }\n            setConversations(updatedConvs);\n          }\n          console.log('Message sent successfully, keeping chat dialog open');\n        } catch (apiError) {\n          console.log('Error sending via API, using local fallback:', apiError);\n          var _updatedConvs = _toConsumableArray(updatedConversations);\n          var _convIndex = _updatedConvs.findIndex(function (c) {\n            return c.user._id === selectedUser._id && c.post._id === selectedPost._id;\n          });\n          if (_convIndex !== -1) {\n            var _msgIndex = _updatedConvs[_convIndex].messages.findIndex(function (msg) {\n              return msg._id === tempMessage._id;\n            });\n            if (_msgIndex !== -1) {\n              _updatedConvs[_convIndex].messages[_msgIndex] = _objectSpread(_objectSpread({}, _updatedConvs[_convIndex].messages[_msgIndex]), {}, {\n                sending: false,\n                failed: true\n              });\n            }\n            setConversations(_updatedConvs);\n          }\n          Alert.alert('Error', 'Failed to send message. Network issue or server unavailable.');\n        }\n      } catch (error) {\n        console.log('Error saving message:', error);\n        Alert.alert('Error', 'Failed to send message. Please try again.');\n      }\n    });\n    return function handleSendNewMessage() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var resetMessages = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        yield AsyncStorage.removeItem('demo_conversations');\n        Alert.alert('Messages Reset', 'Local message cache has been cleared. Messages from the server may still exist. Pull down to refresh and see the changes.', [{\n          text: 'OK',\n          onPress: function onPress() {\n            return fetchConversations();\n          }\n        }]);\n      } catch (error) {\n        console.log('Error resetting messages:', error);\n        Alert.alert('Error', 'Failed to reset messages.');\n      }\n    });\n    return function resetMessages() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  if (!userInfo) {\n    return _jsxs(View, {\n      style: styles.centeredContainer,\n      children: [_jsx(Ionicons, {\n        name: \"chatbubbles-outline\",\n        size: 70,\n        color: \"#0066CC\"\n      }), _jsx(Text, {\n        style: styles.noticeTitle,\n        children: \"Login Required\"\n      }), _jsx(Text, {\n        style: styles.noticeText,\n        children: \"Please log in to access your conversations\"\n      }), _jsx(TouchableOpacity, {\n        style: styles.loginButton,\n        onPress: function onPress() {\n          return navigation.navigate('Login');\n        },\n        children: _jsx(Text, {\n          style: styles.loginButtonText,\n          children: \"Login\"\n        })\n      })]\n    });\n  }\n  var renderEmptyState = function renderEmptyState() {\n    return _jsxs(View, {\n      style: styles.emptyContainer,\n      children: [_jsx(Ionicons, {\n        name: \"chatbubbles-outline\",\n        size: 70,\n        color: \"#ccc\"\n      }), _jsx(Text, {\n        style: styles.emptyTitle,\n        children: \"No Conversations Yet\"\n      }), _jsx(Text, {\n        style: styles.emptyText,\n        children: \"You don't have any messages yet. Find a post you're interested in and start a conversation!\"\n      }), _jsx(TouchableOpacity, {\n        style: styles.findPostsButton,\n        onPress: function onPress() {\n          return navigation.navigate('Home');\n        },\n        children: _jsx(Text, {\n          style: styles.findPostsButtonText,\n          children: \"Find Posts\"\n        })\n      })]\n    });\n  };\n  var renderConversationItem = function renderConversationItem(_ref6) {\n    var _item$lastMessage, _item$lastMessage$sen, _item$lastMessage2, _item$lastMessage3, _item$lastMessage4, _item$lastMessage5, _item$user, _item$user2, _item$post;\n    var item = _ref6.item;\n    if (!item || !item.user || !item.lastMessage || !item.post) {\n      console.log('Skipping invalid conversation item:', item);\n      return null;\n    }\n    console.log('Rendering conversation:', item._id, 'lastMessage:', item.lastMessage.content);\n    var isUnread = item.unreadCount > 0;\n    var isSenderMe = ((_item$lastMessage = item.lastMessage) == null ? void 0 : (_item$lastMessage$sen = _item$lastMessage.sender) == null ? void 0 : _item$lastMessage$sen._id) === (userInfo == null ? void 0 : userInfo._id);\n    var messageContent = ((_item$lastMessage2 = item.lastMessage) == null ? void 0 : _item$lastMessage2.content) || 'No message content';\n    var messagePreview = isSenderMe ? \"You: \" + messageContent : messageContent;\n    var isSending = (_item$lastMessage3 = item.lastMessage) == null ? void 0 : _item$lastMessage3.sending;\n    var isFailed = (_item$lastMessage4 = item.lastMessage) == null ? void 0 : _item$lastMessage4.failed;\n    var messageDate = (_item$lastMessage5 = item.lastMessage) != null && _item$lastMessage5.createdAt ? new Date(item.lastMessage.createdAt) : new Date();\n    return _jsxs(TouchableOpacity, {\n      style: [styles.conversationItem, isUnread && styles.unreadItem],\n      onPress: function onPress() {\n        return goToChat(item);\n      },\n      children: [_jsxs(View, {\n        style: styles.avatarContainer,\n        children: [(_item$user = item.user) != null && _item$user.profileImage ? _jsx(Image, {\n          source: {\n            uri: item.user.profileImage\n          },\n          style: styles.avatar\n        }) : _jsx(View, {\n          style: styles.avatarPlaceholder,\n          children: _jsx(Ionicons, {\n            name: \"person\",\n            size: 20,\n            color: \"#999\"\n          })\n        }), isUnread && _jsx(View, {\n          style: styles.unreadDot\n        })]\n      }), _jsxs(View, {\n        style: styles.conversationInfo,\n        children: [_jsxs(View, {\n          style: styles.conversationHeader,\n          children: [_jsx(Text, {\n            style: styles.username,\n            children: ((_item$user2 = item.user) == null ? void 0 : _item$user2.name) || 'Unknown User'\n          }), _jsx(Text, {\n            style: styles.messageTime,\n            children: messageDate.toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          })]\n        }), _jsxs(View, {\n          style: styles.messagePreviewContainer,\n          children: [_jsxs(Text, {\n            style: [styles.messagePreview, isUnread && styles.unreadText, isFailed && styles.failedText],\n            numberOfLines: 1,\n            children: [isSending && '🕒 ', isFailed && '❌ ', messagePreview]\n          }), isUnread && item.unreadCount > 0 && _jsx(View, {\n            style: styles.unreadBadge,\n            children: _jsx(Text, {\n              style: styles.unreadCount,\n              children: item.unreadCount > 99 ? '99+' : item.unreadCount\n            })\n          })]\n        }), _jsxs(Text, {\n          style: styles.postTitle,\n          numberOfLines: 1,\n          children: [\"Re: \", ((_item$post = item.post) == null ? void 0 : _item$post.title) || 'Unknown Post']\n        })]\n      })]\n    });\n  };\n  var renderComposeModal = function renderComposeModal() {\n    var selectedConversation = conversations.find(function (c) {\n      return c.user._id === (selectedUser == null ? void 0 : selectedUser._id) && c.post._id === (selectedPost == null ? void 0 : selectedPost._id);\n    });\n    var conversationMessages = (selectedConversation == null ? void 0 : selectedConversation.messages) || [];\n    return _jsx(Modal, {\n      visible: showComposeModal,\n      transparent: true,\n      animationType: \"slide\",\n      onRequestClose: function onRequestClose() {\n        return setShowComposeModal(false);\n      },\n      children: _jsx(View, {\n        style: styles.fullScreenModalOverlay,\n        children: _jsxs(View, {\n          style: styles.chatModalContent,\n          children: [_jsxs(View, {\n            style: styles.composeModalHeader,\n            children: [_jsxs(View, {\n              style: styles.chatHeaderInfo,\n              children: [selectedUser != null && selectedUser.profileImage ? _jsx(Image, {\n                source: {\n                  uri: selectedUser.profileImage\n                },\n                style: styles.chatHeaderAvatar\n              }) : _jsx(View, {\n                style: styles.chatHeaderAvatarPlaceholder,\n                children: _jsx(Ionicons, {\n                  name: \"person\",\n                  size: 18,\n                  color: \"#ccc\"\n                })\n              }), _jsxs(View, {\n                style: styles.chatHeaderTextContainer,\n                children: [_jsx(Text, {\n                  style: styles.composeModalTitle,\n                  children: (selectedUser == null ? void 0 : selectedUser.name) || 'Chat'\n                }), selectedPost && _jsxs(Text, {\n                  style: styles.chatHeaderPostTitle,\n                  numberOfLines: 1,\n                  children: [\"Re: \", selectedPost.title]\n                })]\n              })]\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return setShowComposeModal(false);\n              },\n              children: _jsx(Ionicons, {\n                name: \"close\",\n                size: 24,\n                color: \"#333\"\n              })\n            })]\n          }), _jsx(View, {\n            style: styles.chatMessagesContainer,\n            children: conversationMessages.length > 0 ? _jsx(FlatList, {\n              data: conversationMessages,\n              keyExtractor: function keyExtractor(item) {\n                return item._id || `msg_${Date.now()}_${Math.random()}`;\n              },\n              renderItem: function renderItem(_ref7) {\n                var _item$sender;\n                var item = _ref7.item;\n                if (!item || !item.content) {\n                  return null;\n                }\n                var isFromMe = ((_item$sender = item.sender) == null ? void 0 : _item$sender._id) === (userInfo == null ? void 0 : userInfo._id);\n                var messageTime = item.createdAt ? new Date(item.createdAt) : new Date();\n                return _jsxs(View, {\n                  style: [styles.messageBubble, isFromMe ? styles.myMessage : styles.theirMessage],\n                  children: [_jsx(Text, {\n                    style: [styles.messageText, isFromMe ? styles.myMessageText : styles.theirMessageText],\n                    children: item.content\n                  }), _jsx(Text, {\n                    style: [styles.messageTime, isFromMe ? styles.myMessageTime : styles.theirMessageTime],\n                    children: messageTime.toLocaleTimeString([], {\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })\n                  })]\n                });\n              },\n              inverted: true,\n              contentContainerStyle: styles.messagesListContent\n            }) : _jsxs(View, {\n              style: styles.noMessagesContainer,\n              children: [_jsx(Ionicons, {\n                name: \"chatbubble-outline\",\n                size: 40,\n                color: \"#ccc\"\n              }), _jsx(Text, {\n                style: styles.noMessagesText,\n                children: \"No messages yet\"\n              }), _jsx(Text, {\n                style: styles.noMessagesSubtext,\n                children: \"Start the conversation below\"\n              })]\n            })\n          }), _jsxs(View, {\n            style: styles.chatInputContainer,\n            children: [_jsx(TextInput, {\n              style: styles.chatInput,\n              placeholder: \"Type your message here...\",\n              value: newMessage,\n              onChangeText: setNewMessage,\n              multiline: true,\n              maxHeight: 100\n            }), _jsx(TouchableOpacity, {\n              style: [styles.sendButton, !newMessage.trim() && styles.sendButtonDisabled],\n              onPress: handleSendNewMessage,\n              disabled: !newMessage.trim(),\n              children: _jsx(Ionicons, {\n                name: \"send\",\n                size: 20,\n                color: newMessage.trim() ? \"white\" : \"#999\"\n              })\n            })]\n          })]\n        })\n      })\n    });\n  };\n  if (loading && !refreshing) {\n    return _jsxs(View, {\n      style: styles.loadingContainer,\n      children: [_jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#0066CC\"\n      }), _jsx(Text, {\n        style: styles.loadingText,\n        children: \"Loading conversations...\"\n      })]\n    });\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [renderComposeModal(), _jsx(FlatList, {\n      data: conversations,\n      keyExtractor: function keyExtractor(item) {\n        return item._id;\n      },\n      renderItem: renderConversationItem,\n      onRefresh: handleRefresh,\n      refreshing: refreshing,\n      ListEmptyComponent: renderEmptyState,\n      contentContainerStyle: conversations.length === 0 ? {\n        flex: 1\n      } : null\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f8f8'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: 'white',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0'\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333'\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  loadingText: {\n    marginTop: 12,\n    fontSize: 16,\n    color: '#666'\n  },\n  conversationItem: {\n    flexDirection: 'row',\n    padding: 15,\n    backgroundColor: 'white',\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee'\n  },\n  unreadItem: {\n    backgroundColor: '#f0f7ff'\n  },\n  avatarContainer: {\n    marginRight: 12\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25\n  },\n  avatarPlaceholder: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#f0f0f0',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  conversationInfo: {\n    flex: 1\n  },\n  conversationHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 4\n  },\n  username: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333'\n  },\n  messageTime: {\n    fontSize: 12,\n    color: '#888'\n  },\n  messagePreviewContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 4,\n    flex: 1\n  },\n  messagePreview: {\n    fontSize: 14,\n    color: '#666',\n    flex: 1,\n    marginRight: 8\n  },\n  unreadText: {\n    fontWeight: 'bold',\n    color: '#000'\n  },\n  failedText: {\n    color: 'red'\n  },\n  unreadBadge: {\n    backgroundColor: '#0066CC',\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 8,\n    alignSelf: 'center'\n  },\n  unreadCount: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold'\n  },\n  postTitle: {\n    fontSize: 14,\n    color: '#0066CC',\n    marginBottom: 4\n  },\n  centeredContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  noticeTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginTop: 16,\n    marginBottom: 8,\n    color: '#333'\n  },\n  noticeText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginBottom: 24,\n    color: '#666',\n    lineHeight: 22\n  },\n  loginButton: {\n    backgroundColor: '#0066CC',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    marginTop: 8\n  },\n  loginButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  trialButton: {\n    backgroundColor: '#0066CC',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    marginBottom: 12,\n    width: '80%',\n    alignItems: 'center'\n  },\n  trialButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  upgradeButton: {\n    borderWidth: 1,\n    borderColor: '#0066CC',\n    backgroundColor: 'transparent',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    width: '80%',\n    alignItems: 'center'\n  },\n  upgradeButtonText: {\n    color: '#0066CC',\n    fontSize: 16,\n    fontWeight: '600'\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginTop: 16,\n    marginBottom: 8,\n    color: '#333'\n  },\n  emptyText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginBottom: 24,\n    color: '#666',\n    lineHeight: 22\n  },\n  findPostsButton: {\n    backgroundColor: '#0066CC',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8\n  },\n  findPostsButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  newChatButton: {\n    position: 'absolute',\n    right: 20,\n    bottom: 20,\n    backgroundColor: '#0066CC',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 24,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    elevation: 3\n  },\n  newChatButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    marginLeft: 4\n  },\n  modalOverlay: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    padding: 20\n  },\n  trialModalContent: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    width: '85%',\n    maxWidth: 400,\n    overflow: 'hidden',\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4\n  },\n  trialModalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee'\n  },\n  trialModalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333'\n  },\n  trialModalBody: {\n    padding: 20,\n    alignItems: 'center'\n  },\n  trialIcon: {\n    marginBottom: 15\n  },\n  trialTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 10\n  },\n  trialDescription: {\n    fontSize: 16,\n    color: '#333',\n    textAlign: 'center',\n    marginBottom: 20,\n    lineHeight: 24\n  },\n  benefitsContainer: {\n    marginBottom: 20\n  },\n  benefitRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 4\n  },\n  benefitText: {\n    fontSize: 16,\n    color: '#333',\n    marginLeft: 8\n  },\n  phoneInputContainer: {\n    width: '100%',\n    marginBottom: 20\n  },\n  phoneLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 8,\n    color: '#333'\n  },\n  phoneInputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 8,\n    padding: 12\n  },\n  phoneIcon: {\n    marginRight: 8\n  },\n  phoneInput: {\n    flex: 1,\n    fontSize: 16\n  },\n  errorText: {\n    color: 'red',\n    fontSize: 12,\n    marginTop: 5\n  },\n  startTrialButton: {\n    backgroundColor: '#0066CC',\n    padding: 12,\n    borderRadius: 8,\n    flex: 1.5,\n    alignItems: 'center'\n  },\n  startTrialButtonText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  termsText: {\n    fontSize: 12,\n    color: '#666',\n    textAlign: 'center',\n    marginTop: 10\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#f0f0f0',\n    paddingVertical: 4,\n    paddingHorizontal: 8,\n    borderRadius: 12\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    marginLeft: 4\n  },\n  composeModalContent: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    width: '100%',\n    maxWidth: 400,\n    overflow: 'hidden',\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4\n  },\n  composeModalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n    backgroundColor: 'white'\n  },\n  chatHeaderInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1\n  },\n  chatHeaderAvatar: {\n    width: 36,\n    height: 36,\n    borderRadius: 18,\n    marginRight: 8\n  },\n  chatHeaderAvatarPlaceholder: {\n    width: 36,\n    height: 36,\n    borderRadius: 18,\n    backgroundColor: '#f0f0f0',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 8\n  },\n  chatHeaderTextContainer: {\n    flexDirection: 'column',\n    flex: 1\n  },\n  composeModalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333'\n  },\n  chatHeaderPostTitle: {\n    fontSize: 14,\n    color: '#666'\n  },\n  chatMessagesContainer: {\n    flex: 1,\n    backgroundColor: '#f8f8f8'\n  },\n  messagesListContent: {\n    padding: 16,\n    flexGrow: 1,\n    justifyContent: 'flex-end'\n  },\n  messageBubble: {\n    maxWidth: '80%',\n    padding: 12,\n    borderRadius: 18,\n    marginBottom: 8\n  },\n  myMessage: {\n    backgroundColor: '#0066CC',\n    alignSelf: 'flex-end',\n    borderBottomRightRadius: 4\n  },\n  theirMessage: {\n    backgroundColor: 'white',\n    alignSelf: 'flex-start',\n    borderBottomLeftRadius: 4\n  },\n  messageText: {\n    fontSize: 16\n  },\n  myMessageText: {\n    color: 'white'\n  },\n  theirMessageText: {\n    color: '#333'\n  },\n  messageTime: {\n    fontSize: 12,\n    marginTop: 4,\n    alignSelf: 'flex-end'\n  },\n  myMessageTime: {\n    color: 'rgba(255, 255, 255, 0.7)'\n  },\n  theirMessageTime: {\n    color: 'rgba(0, 0, 0, 0.5)'\n  },\n  chatInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    backgroundColor: 'white',\n    borderTopWidth: 1,\n    borderTopColor: '#eee'\n  },\n  chatInput: {\n    flex: 1,\n    padding: 12,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 20,\n    marginRight: 10,\n    maxHeight: 100\n  },\n  sendButton: {\n    backgroundColor: '#0066CC',\n    borderRadius: 25,\n    width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  sendButtonDisabled: {\n    backgroundColor: '#cccccc'\n  },\n  noMessagesContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  noMessagesText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#666',\n    marginTop: 10\n  },\n  noMessagesSubtext: {\n    fontSize: 14,\n    color: '#999',\n    textAlign: 'center',\n    marginTop: 5\n  },\n  resetButton: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    backgroundColor: '#FF3B30',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 24,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    elevation: 3\n  },\n  resetButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    marginLeft: 4\n  },\n  fullScreenModalOverlay: {\n    flex: 1,\n    backgroundColor: 'white'\n  },\n  chatModalContent: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  unreadDot: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    width: 12,\n    height: 12,\n    backgroundColor: '#0066CC',\n    borderRadius: 6,\n    borderWidth: 2,\n    borderColor: 'white'\n  }\n});\nexport default ChatListScreen;","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","View","Text","StyleSheet","FlatList","TouchableOpacity","ActivityIndicator","Alert","Image","Modal","TextInput","Ionicons","AuthContext","axios","API_URL","getConversationsList","sendDirectMessage","getMessages","KeyboardAwareScrollView","AsyncStorage","jsx","_jsx","jsxs","_jsxs","ChatListScreen","_ref","_route$params2","_route$params6","_route$params7","_route$params8","navigation","route","_useContext","userInfo","requireLogin","_useState","_useState2","_slicedToArray","conversations","setConversations","_useState3","_useState4","loading","setLoading","_useState5","_useState6","refreshing","setRefreshing","_useState7","_useState8","showTrialModal","setShowTrialModal","_useState9","phone","_useState10","setPhone","_useState11","_useState12","phoneError","setPhoneError","_useState13","_useState14","isStartingTrial","setIsStartingTrial","_useState15","_useState16","trialError","setTrialError","requestedTrialRef","_useState17","_useState18","showComposeModal","setShowComposeModal","_useState19","_useState20","newMessage","setNewMessage","_useState21","_useState22","selectedUser","setSelectedUser","_useState23","_useState24","selectedPost","setSelectedPost","unsubscribe","addListener","fetchConversations","_route$params","params","messageUpdated","console","log","setParams","undefined","_route$params3","_route$params4","_route$params5","showComposeMessage","checkAccess","_ref2","_asyncToGenerator","apiConversations","length","formattedConversations","map","conversation","user","lastMessage","post","_id","messages","unreadCount","filter","Boolean","sort","a","b","_b$lastMessage","_a$lastMessage","Date","createdAt","apiError","savedConversations","getItem","parsedConversations","JSON","parse","Array","isArray","validConversations","conv","parseError","storageError","demoConversations","name","profileImage","content","sender","recipient","title","now","setItem","stringify","error","alert","apply","arguments","handleRefresh","goToChat","_ref3","response","success","data","existingConvIndex","findIndex","c","updatedConversations","_toConsumableArray","_x","handleSendNewMessage","_ref4","trim","messageText","tempMessage","toISOString","email","receiver","sending","conversationId","_objectSpread","concat","newConversation","messageData","updatedConvs","convIndex","msgIndex","msg","failed","resetMessages","_ref5","removeItem","text","onPress","style","styles","centeredContainer","children","size","color","noticeTitle","noticeText","loginButton","navigate","loginButtonText","renderEmptyState","emptyContainer","emptyTitle","emptyText","findPostsButton","findPostsButtonText","renderConversationItem","_ref6","_item$lastMessage","_item$lastMessage$sen","_item$lastMessage2","_item$lastMessage3","_item$lastMessage4","_item$lastMessage5","_item$user","_item$user2","_item$post","item","isUnread","isSenderMe","messageContent","messagePreview","isSending","isFailed","messageDate","conversationItem","unreadItem","avatarContainer","source","uri","avatar","avatarPlaceholder","unreadDot","conversationInfo","conversationHeader","username","messageTime","toLocaleTimeString","hour","minute","messagePreviewContainer","unreadText","failedText","numberOfLines","unreadBadge","postTitle","renderComposeModal","selectedConversation","find","conversationMessages","visible","transparent","animationType","onRequestClose","fullScreenModalOverlay","chatModalContent","composeModalHeader","chatHeaderInfo","chatHeaderAvatar","chatHeaderAvatarPlaceholder","chatHeaderTextContainer","composeModalTitle","chatHeaderPostTitle","chatMessagesContainer","keyExtractor","Math","random","renderItem","_ref7","_item$sender","isFromMe","messageBubble","myMessage","theirMessage","myMessageText","theirMessageText","myMessageTime","theirMessageTime","inverted","contentContainerStyle","messagesListContent","noMessagesContainer","noMessagesText","noMessagesSubtext","chatInputContainer","chatInput","placeholder","value","onChangeText","multiline","maxHeight","sendButton","sendButtonDisabled","disabled","loadingContainer","loadingText","container","onRefresh","ListEmptyComponent","flex","create","backgroundColor","header","flexDirection","justifyContent","alignItems","paddingHorizontal","paddingVertical","borderBottomWidth","borderBottomColor","headerTitle","fontSize","fontWeight","marginTop","padding","marginRight","width","height","borderRadius","marginBottom","marginLeft","alignSelf","textAlign","lineHeight","trialButton","trialButtonText","upgradeButton","borderWidth","borderColor","upgradeButtonText","newChatButton","position","right","bottom","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","newChatButtonText","modalOverlay","trialModalContent","maxWidth","overflow","trialModalHeader","trialModalTitle","trialModalBody","trialIcon","trialTitle","trialDescription","benefitsContainer","benefitRow","benefitText","phoneInputContainer","phoneLabel","phoneInputWrapper","phoneIcon","phoneInput","errorText","startTrialButton","startTrialButtonText","termsText","statusBadge","statusText","composeModalContent","flexGrow","borderBottomRightRadius","borderBottomLeftRadius","borderTopWidth","borderTopColor","resetButton","left","resetButtonText","display"],"sources":["/Users/handy.hasan/Documents/SportsConnect/client/screens/ChatListScreen.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  ActivityIndicator,\n  Alert,\n  Image,\n  Modal,\n  TextInput\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { AuthContext } from '../context/AuthContext';\nimport axios from 'axios';\nimport { API_URL } from '../config';\nimport { getConversationsList, sendDirectMessage, getMessages } from '../services/api';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst ChatListScreen = ({ navigation, route }) => {\n  const { userInfo, requireLogin } = useContext(AuthContext);\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n  const [showTrialModal, setShowTrialModal] = useState(false);\n  const [phone, setPhone] = useState(userInfo?.phone || '');\n  const [phoneError, setPhoneError] = useState('');\n  const [isStartingTrial, setIsStartingTrial] = useState(false);\n  const [trialError, setTrialError] = useState('');\n  const requestedTrialRef = useRef(false);\n  const [showComposeModal, setShowComposeModal] = useState(false);\n  const [newMessage, setNewMessage] = useState('');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [selectedPost, setSelectedPost] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      if (userInfo) {\n        fetchConversations();\n      }\n    });\n\n    return unsubscribe;\n  }, [navigation, route]);\n\n  // Add a listener for route.params updates which is used for message sending notifications\n  useEffect(() => {\n    if (route.params?.messageUpdated && userInfo) {\n      console.log('Message update detected, refreshing conversations');\n      fetchConversations();\n      // Clear the param after handling to avoid repeated refreshes\n      navigation.setParams({ messageUpdated: undefined });\n    }\n  }, [route.params?.messageUpdated]);\n\n  // New effect to handle selected user and post for new conversation\n  useEffect(() => {\n    if (route.params?.selectedUser && route.params?.selectedPost && route.params?.showComposeMessage) {\n      // Directly show compose modal - no premium check\n      setSelectedUser(route.params.selectedUser);\n      setSelectedPost(route.params.selectedPost);\n      setShowComposeModal(true);\n    }\n  }, [route.params?.selectedUser, route.params?.selectedPost, route.params?.showComposeMessage]);\n\n  useEffect(() => {\n    if (userInfo) {\n      fetchConversations();\n    }\n  }, [userInfo]);\n\n  const checkAccess = () => {\n    // Just check if user is logged in\n    return !!userInfo;\n  };\n\n  const fetchConversations = async () => {\n    try {\n      setLoading(true);\n      \n      // Try to use the real API endpoint first\n      try {\n        console.log('Attempting to fetch conversations from API...');\n        const apiConversations = await getConversationsList();\n        \n        if (apiConversations && apiConversations.length > 0) {\n          console.log('Successfully fetched conversations from API');\n          \n          // Process the new API response format\n          // Each conversation in the API has user, messages array, lastMessage, unreadCount, and post\n          const formattedConversations = apiConversations.map(conversation => {\n            // Ensure we have all required data\n            if (!conversation.user || !conversation.lastMessage || !conversation.post) {\n              console.log('Conversation has incomplete data:', conversation);\n              return null;\n            }\n            \n            return {\n              _id: `${conversation.user._id}_${conversation.post._id}`,\n              user: conversation.user,\n              post: conversation.post,\n              lastMessage: conversation.lastMessage,\n              messages: conversation.messages || [conversation.lastMessage],\n              unreadCount: conversation.unreadCount || 0\n            };\n          }).filter(Boolean); // Remove any null entries\n          \n          // Sort by most recent message\n          formattedConversations.sort((a, b) => \n            new Date(b.lastMessage?.createdAt) - new Date(a.lastMessage?.createdAt)\n          );\n          \n          console.log('Formatted conversations:', formattedConversations.length);\n          setConversations(formattedConversations);\n          setLoading(false);\n          setRefreshing(false);\n          return;\n        }\n      } catch (apiError) {\n        console.log('Error fetching from API, falling back to local storage:', apiError);\n      }\n      \n      // If the API call fails, fall back to AsyncStorage\n      // This is a fallback for demonstration when not connected to backend\n      try {\n        const savedConversations = await AsyncStorage.getItem('demo_conversations');\n        \n        if (savedConversations) {\n          try {\n            const parsedConversations = JSON.parse(savedConversations);\n            if (parsedConversations && Array.isArray(parsedConversations) && parsedConversations.length > 0) {\n              // Validate each conversation has required fields\n              const validConversations = parsedConversations.filter(conv => \n                conv && conv.user && conv.user._id && conv.post && conv.post._id\n              );\n              \n              setConversations(validConversations);\n              setLoading(false);\n              setRefreshing(false);\n              return;\n            }\n          } catch (parseError) {\n            console.log('Error parsing saved conversations:', parseError);\n            // If there's an error parsing, continue to create demo conversation\n          }\n        }\n      } catch (storageError) {\n        console.log('Error accessing local storage:', storageError);\n        // Continue to create demo conversation\n      }\n      \n      // Create demo conversation if nothing found\n      const demoConversations = [\n        {\n          _id: 'demo1',\n          user: { \n            _id: 'user1', \n            name: 'John Doe',\n            profileImage: 'https://randomuser.me/api/portraits/men/32.jpg'\n          },\n          lastMessage: {\n            content: 'This is a demo conversation.',\n            createdAt: new Date(),\n            sender: { _id: 'user1', name: 'John Doe' },\n            recipient: { _id: userInfo._id, name: userInfo.name }\n          },\n          post: {\n            _id: 'post1',\n            title: 'Basketball game this weekend'\n          },\n          unreadCount: 1,\n          messages: [\n            {\n              _id: `msg_${Date.now()}`,\n              content: 'This is a demo conversation.',\n              createdAt: new Date(),\n              sender: { _id: 'user1', name: 'John Doe' },\n              recipient: { _id: userInfo._id, name: userInfo.name },\n              post: {\n                _id: 'post1',\n                title: 'Basketball game this weekend'\n              }\n            }\n          ]\n        }\n      ];\n      \n      setConversations(demoConversations);\n      await AsyncStorage.setItem('demo_conversations', JSON.stringify(demoConversations));\n      \n    } catch (error) {\n      console.log('Error fetching conversations:', error);\n      Alert.alert('Error', 'Failed to load conversations. Please try again later.');\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n    fetchConversations();\n  };\n\n  const goToChat = async (conversation) => {\n    // Validate conversation object has required properties\n    if (!conversation || !conversation.user || !conversation.post) {\n      console.log('Invalid conversation object:', conversation);\n      Alert.alert('Error', 'Cannot open this conversation. Data is incomplete.');\n      return;\n    }\n\n    // Ensure user and post have _id properties\n    if (!conversation.user._id || !conversation.post._id) {\n      console.log('Conversation has missing _id properties:', conversation);\n      Alert.alert('Error', 'Cannot open this conversation. ID information is missing.');\n      return;\n    }\n\n    // Set up the conversation for viewing/replying\n    setSelectedUser(conversation.user);\n    setSelectedPost(conversation.post);\n    setNewMessage(''); // Clear any previous message\n    \n    try {\n      // Try to fetch messages from API first\n      try {\n        console.log('Fetching messages for conversation with:', conversation.user._id);\n        const response = await getMessages(conversation.user._id);\n        \n        if (response.success && response.data && response.data.length > 0) {\n          // Update conversation with full message history\n          const existingConvIndex = conversations.findIndex(c => \n            c._id === conversation._id\n          );\n          \n          if (existingConvIndex !== -1) {\n            const updatedConversations = [...conversations];\n            updatedConversations[existingConvIndex].messages = response.data;\n            setConversations(updatedConversations);\n          }\n        }\n      } catch (apiError) {\n        console.log('Error fetching messages from API:', apiError);\n      }\n      \n      // Open the compose modal instead of navigating to ChatScreen\n      setShowComposeModal(true);\n      \n    } catch (error) {\n      console.log('Error in goToChat:', error);\n      // Even if there's an error, still try to open the modal\n      setShowComposeModal(true);\n    }\n  };\n\n  const handleSendNewMessage = async () => {\n    if (!newMessage.trim() || !selectedUser || !selectedPost) {\n      return;\n    }\n\n    // Store the message before clearing the input for better UX\n    const messageText = newMessage.trim();\n    setNewMessage('');\n    \n    // Create a temporary message to show immediately\n    const tempMessage = {\n      _id: `local_msg_${Date.now()}`,\n      content: messageText,\n      createdAt: new Date().toISOString(),\n      sender: { \n        _id: userInfo._id, \n        name: userInfo.name,\n        email: userInfo.email \n      },\n      receiver: selectedUser,\n      post: selectedPost,\n      sending: true\n    };\n    \n    try {\n      // Update UI immediately for better user experience\n      // Find existing conversation or create new one\n      const conversationId = `${selectedUser._id}_${selectedPost._id}`;\n      const existingConvIndex = conversations.findIndex(c => \n        c.user._id === selectedUser._id && c.post._id === selectedPost._id\n      );\n      \n      let updatedConversations = [...conversations];\n      \n      if (existingConvIndex !== -1) {\n        // Update existing conversation\n        updatedConversations[existingConvIndex] = {\n          ...updatedConversations[existingConvIndex],\n          lastMessage: tempMessage,\n          messages: [\n            tempMessage,\n            ...(updatedConversations[existingConvIndex].messages || [])\n          ]\n        };\n      } else {\n        // Create new conversation\n        const newConversation = {\n          _id: conversationId,\n          user: selectedUser,\n          lastMessage: tempMessage,\n          messages: [tempMessage],\n          post: selectedPost,\n          unreadCount: 0\n        };\n        updatedConversations = [newConversation, ...updatedConversations];\n      }\n      \n      setConversations(updatedConversations);\n      \n      // Now try to send via API\n      const messageData = {\n        recipient: selectedUser._id,\n        content: messageText,\n        post: selectedPost._id\n      };\n      \n      console.log('Sending message via API:', messageData);\n      \n      let response;\n      try {\n        response = await sendDirectMessage(messageData);\n        console.log('API response:', response);\n        \n        // Update the conversation with the actual response\n        const updatedConvs = [...updatedConversations];\n        const convIndex = updatedConvs.findIndex(c => \n          c.user._id === selectedUser._id && c.post._id === selectedPost._id\n        );\n        \n        if (convIndex !== -1) {\n          // Update the message with the real data from the server\n          updatedConvs[convIndex].lastMessage = {\n            ...response,\n            sender: { \n              _id: userInfo._id, \n              name: userInfo.name,\n              email: userInfo.email \n            },\n            receiver: selectedUser,\n            post: selectedPost\n          };\n          \n          // Update the message in the messages array too\n          const msgIndex = updatedConvs[convIndex].messages.findIndex(\n            msg => msg._id === tempMessage._id\n          );\n          \n          if (msgIndex !== -1) {\n            updatedConvs[convIndex].messages[msgIndex] = {\n              ...response,\n              sender: { \n                _id: userInfo._id, \n                name: userInfo.name,\n                email: userInfo.email \n              },\n              receiver: selectedUser,\n              post: selectedPost\n            };\n          }\n          \n          setConversations(updatedConvs);\n        }\n        \n        console.log('Message sent successfully, keeping chat dialog open');\n        \n      } catch (apiError) {\n        console.log('Error sending via API, using local fallback:', apiError);\n        \n        // Mark the message as failed in the UI\n        const updatedConvs = [...updatedConversations];\n        const convIndex = updatedConvs.findIndex(c => \n          c.user._id === selectedUser._id && c.post._id === selectedPost._id\n        );\n        \n        if (convIndex !== -1) {\n          // Mark the message as failed\n          const msgIndex = updatedConvs[convIndex].messages.findIndex(\n            msg => msg._id === tempMessage._id\n          );\n          \n          if (msgIndex !== -1) {\n            updatedConvs[convIndex].messages[msgIndex] = {\n              ...updatedConvs[convIndex].messages[msgIndex],\n              sending: false,\n              failed: true\n            };\n          }\n          \n          setConversations(updatedConvs);\n        }\n        \n        Alert.alert('Error', 'Failed to send message. Network issue or server unavailable.');\n      }\n      \n    } catch (error) {\n      console.log('Error saving message:', error);\n      Alert.alert('Error', 'Failed to send message. Please try again.');\n    }\n  };\n\n  // Update the reset function to clear data\n  const resetMessages = async () => {\n    try {\n      // For demo purposes only - clear local storage\n      await AsyncStorage.removeItem('demo_conversations');\n      \n      Alert.alert(\n        'Messages Reset',\n        'Local message cache has been cleared. Messages from the server may still exist. Pull down to refresh and see the changes.',\n        [{ text: 'OK', onPress: () => fetchConversations() }]\n      );\n    } catch (error) {\n      console.log('Error resetting messages:', error);\n      Alert.alert('Error', 'Failed to reset messages.');\n    }\n  };\n\n  // Not logged in view\n  if (!userInfo) {\n    return (\n      <View style={styles.centeredContainer}>\n        <Ionicons name=\"chatbubbles-outline\" size={70} color=\"#0066CC\" />\n        <Text style={styles.noticeTitle}>Login Required</Text>\n        <Text style={styles.noticeText}>\n          Please log in to access your conversations\n        </Text>\n        <TouchableOpacity\n          style={styles.loginButton}\n          onPress={() => navigation.navigate('Login')}\n        >\n          <Text style={styles.loginButtonText}>Login</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  // Show empty state when there are no conversations\n  const renderEmptyState = () => {\n    return (\n      <View style={styles.emptyContainer}>\n        <Ionicons name=\"chatbubbles-outline\" size={70} color=\"#ccc\" />\n        <Text style={styles.emptyTitle}>No Conversations Yet</Text>\n        <Text style={styles.emptyText}>\n          You don't have any messages yet. Find a post you're interested in and start a conversation!\n        </Text>\n        <TouchableOpacity\n          style={styles.findPostsButton}\n          onPress={() => navigation.navigate('Home')}\n        >\n          <Text style={styles.findPostsButtonText}>Find Posts</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  const renderConversationItem = ({ item }) => {\n    // Skip rendering if item doesn't have required properties\n    if (!item || !item.user || !item.lastMessage || !item.post) {\n      console.log('Skipping invalid conversation item:', item);\n      return null;\n    }\n\n    console.log('Rendering conversation:', item._id, 'lastMessage:', item.lastMessage.content);\n    \n    const isUnread = item.unreadCount > 0;\n    const isSenderMe = item.lastMessage?.sender?._id === userInfo?._id;\n    \n    // Create safe display content with fallbacks for missing data\n    const messageContent = item.lastMessage?.content || 'No message content';\n    const messagePreview = isSenderMe \n      ? \"You: \" + messageContent\n      : messageContent;\n    \n    // Check if a message is still sending or failed\n    const isSending = item.lastMessage?.sending;\n    const isFailed = item.lastMessage?.failed;\n\n    // Safely get creation date with fallback\n    const messageDate = item.lastMessage?.createdAt \n      ? new Date(item.lastMessage.createdAt)\n      : new Date();\n\n    return (\n      <TouchableOpacity\n        style={[styles.conversationItem, isUnread && styles.unreadItem]}\n        onPress={() => goToChat(item)}\n      >\n        <View style={styles.avatarContainer}>\n          {item.user?.profileImage ? (\n            <Image\n              source={{ uri: item.user.profileImage }}\n              style={styles.avatar}\n            />\n          ) : (\n            <View style={styles.avatarPlaceholder}>\n              <Ionicons name=\"person\" size={20} color=\"#999\" />\n            </View>\n          )}\n          {isUnread && <View style={styles.unreadDot} />}\n        </View>\n\n        <View style={styles.conversationInfo}>\n          <View style={styles.conversationHeader}>\n            <Text style={styles.username}>{item.user?.name || 'Unknown User'}</Text>\n            <Text style={styles.messageTime}>\n              {messageDate.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })}\n            </Text>\n          </View>\n\n          <View style={styles.messagePreviewContainer}>\n            <Text \n              style={[\n                styles.messagePreview, \n                isUnread && styles.unreadText,\n                isFailed && styles.failedText\n              ]} \n              numberOfLines={1}\n            >\n              {isSending && '🕒 '}\n              {isFailed && '❌ '}\n              {messagePreview}\n            </Text>\n            \n            {isUnread && item.unreadCount > 0 && (\n              <View style={styles.unreadBadge}>\n                <Text style={styles.unreadCount}>\n                  {item.unreadCount > 99 ? '99+' : item.unreadCount}\n                </Text>\n              </View>\n            )}\n          </View>\n\n          <Text style={styles.postTitle} numberOfLines={1}>\n            Re: {item.post?.title || 'Unknown Post'}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  // Add this function to render the compose message modal\n  const renderComposeModal = () => {\n    // Find the conversation that matches the selected user and post\n    const selectedConversation = conversations.find(\n      c => c.user._id === selectedUser?._id && c.post._id === selectedPost?._id\n    );\n    \n    // Get messages from the selected conversation\n    const conversationMessages = selectedConversation?.messages || [];\n    \n    return (\n    <Modal\n      visible={showComposeModal}\n      transparent={true}\n      animationType=\"slide\"\n      onRequestClose={() => setShowComposeModal(false)}\n    >\n        <View style={styles.fullScreenModalOverlay}>\n          <View style={styles.chatModalContent}>\n          <View style={styles.composeModalHeader}>\n              <View style={styles.chatHeaderInfo}>\n                {selectedUser?.profileImage ? (\n                  <Image\n                    source={{ uri: selectedUser.profileImage }}\n                    style={styles.chatHeaderAvatar}\n                  />\n                ) : (\n                  <View style={styles.chatHeaderAvatarPlaceholder}>\n                    <Ionicons name=\"person\" size={18} color=\"#ccc\" />\n                  </View>\n                )}\n                <View style={styles.chatHeaderTextContainer}>\n            <Text style={styles.composeModalTitle}>\n                    {selectedUser?.name || 'Chat'}\n            </Text>\n                  {selectedPost && (\n                    <Text style={styles.chatHeaderPostTitle} numberOfLines={1}>\n                      Re: {selectedPost.title}\n                    </Text>\n                  )}\n                </View>\n              </View>\n            <TouchableOpacity onPress={() => setShowComposeModal(false)}>\n              <Ionicons name=\"close\" size={24} color=\"#333\" />\n            </TouchableOpacity>\n          </View>\n          \n            <View style={styles.chatMessagesContainer}>\n              {conversationMessages.length > 0 ? (\n                <FlatList\n                  data={conversationMessages}\n                  keyExtractor={(item) => item._id || `msg_${Date.now()}_${Math.random()}`}\n                  renderItem={({ item }) => {\n                    // Skip rendering if item doesn't have required properties\n                    if (!item || !item.content) {\n                      return null;\n                    }\n                    \n                    const isFromMe = item.sender?._id === userInfo?._id;\n                    const messageTime = item.createdAt ? new Date(item.createdAt) : new Date();\n                    \n                    return (\n                      <View style={[\n                        styles.messageBubble,\n                        isFromMe ? styles.myMessage : styles.theirMessage\n                      ]}>\n                        <Text style={[\n                          styles.messageText,\n                          isFromMe ? styles.myMessageText : styles.theirMessageText\n                        ]}>\n                          {item.content}\n                        </Text>\n                        <Text style={[\n                          styles.messageTime,\n                          isFromMe ? styles.myMessageTime : styles.theirMessageTime\n                        ]}>\n                          {messageTime.toLocaleTimeString([], \n                            { hour: '2-digit', minute: '2-digit' }\n                          )}\n                        </Text>\n                      </View>\n                    );\n                  }}\n                  inverted={true}\n                  contentContainerStyle={styles.messagesListContent}\n                />\n              ) : (\n                <View style={styles.noMessagesContainer}>\n                  <Ionicons name=\"chatbubble-outline\" size={40} color=\"#ccc\" />\n                  <Text style={styles.noMessagesText}>No messages yet</Text>\n                  <Text style={styles.noMessagesSubtext}>\n                    Start the conversation below\n                  </Text>\n              </View>\n            )}\n            </View>\n            \n            <View style={styles.chatInputContainer}>\n            <TextInput\n                style={styles.chatInput}\n              placeholder=\"Type your message here...\"\n              value={newMessage}\n              onChangeText={setNewMessage}\n              multiline\n                maxHeight={100}\n            />\n            <TouchableOpacity\n              style={[\n                styles.sendButton,\n                !newMessage.trim() && styles.sendButtonDisabled\n              ]}\n              onPress={handleSendNewMessage}\n              disabled={!newMessage.trim()}\n            >\n                <Ionicons \n                  name=\"send\" \n                  size={20} \n                  color={newMessage.trim() ? \"white\" : \"#999\"} \n                />\n            </TouchableOpacity>\n          </View>\n        </View>\n        </View>\n    </Modal>\n  );\n  };\n\n  if (loading && !refreshing) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#0066CC\" />\n        <Text style={styles.loadingText}>Loading conversations...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {renderComposeModal()}\n      \n      <FlatList\n        data={conversations}\n        keyExtractor={(item) => item._id}\n        renderItem={renderConversationItem}\n        onRefresh={handleRefresh}\n        refreshing={refreshing}\n        ListEmptyComponent={renderEmptyState}\n        contentContainerStyle={conversations.length === 0 ? { flex: 1 } : null}\n      />\n      \n      {/* Chat buttons - show for all logged in users */}\n      {/* <TouchableOpacity\n        style={styles.newChatButton}\n        onPress={() => navigation.navigate('Home')}\n      >\n        <Ionicons name=\"add\" size={24} color=\"white\" />\n        <Text style={styles.newChatButtonText}>Find Posts</Text>\n      </TouchableOpacity>\n       */}\n      {/* Add a reset button for testing */}\n      {/* <TouchableOpacity\n        style={styles.resetButton}\n        onPress={() => {\n          Alert.alert(\n            'Reset Messages',\n            'This will clear all messages for all users. Are you sure?',\n            [\n              { text: 'Cancel', style: 'cancel' },\n              { text: 'Reset', onPress: resetMessages, style: 'destructive' }\n            ]\n          );\n        }}\n      >\n        <Ionicons name=\"trash\" size={20} color=\"white\" />\n        <Text style={styles.resetButtonText}>Reset Messages</Text>\n      </TouchableOpacity> */}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f8f8',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: 'white',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 12,\n    fontSize: 16,\n    color: '#666',\n  },\n  conversationItem: {\n    flexDirection: 'row',\n    padding: 15,\n    backgroundColor: 'white',\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n  },\n  unreadItem: {\n    backgroundColor: '#f0f7ff',\n  },\n  avatarContainer: {\n    marginRight: 12,\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n  },\n  avatarPlaceholder: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#f0f0f0',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  conversationInfo: {\n    flex: 1,\n  },\n  conversationHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 4,\n  },\n  username: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n  },\n  messageTime: {\n    fontSize: 12,\n    color: '#888',\n  },\n  messagePreviewContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 4,\n    flex: 1,\n  },\n  messagePreview: {\n    fontSize: 14,\n    color: '#666',\n    flex: 1,\n    marginRight: 8,\n  },\n  unreadText: {\n    fontWeight: 'bold',\n    color: '#000',\n  },\n  failedText: {\n    color: 'red',\n  },\n  unreadBadge: {\n    backgroundColor: '#0066CC',\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 8,\n    alignSelf: 'center',\n  },\n  unreadCount: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  postTitle: {\n    fontSize: 14,\n    color: '#0066CC',\n    marginBottom: 4,\n  },\n  centeredContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  noticeTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginTop: 16,\n    marginBottom: 8,\n    color: '#333',\n  },\n  noticeText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginBottom: 24,\n    color: '#666',\n    lineHeight: 22,\n  },\n  loginButton: {\n    backgroundColor: '#0066CC',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    marginTop: 8,\n  },\n  loginButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  trialButton: {\n    backgroundColor: '#0066CC',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    marginBottom: 12,\n    width: '80%',\n    alignItems: 'center',\n  },\n  trialButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  upgradeButton: {\n    borderWidth: 1,\n    borderColor: '#0066CC',\n    backgroundColor: 'transparent',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    width: '80%',\n    alignItems: 'center',\n  },\n  upgradeButtonText: {\n    color: '#0066CC',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginTop: 16,\n    marginBottom: 8,\n    color: '#333',\n  },\n  emptyText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginBottom: 24,\n    color: '#666',\n    lineHeight: 22,\n  },\n  findPostsButton: {\n    backgroundColor: '#0066CC',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  findPostsButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  newChatButton: {\n    position: 'absolute',\n    right: 20,\n    bottom: 20,\n    backgroundColor: '#0066CC',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 24,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  newChatButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    marginLeft: 4,\n  },\n  modalOverlay: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    padding: 20,\n  },\n  trialModalContent: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    width: '85%',\n    maxWidth: 400,\n    overflow: 'hidden',\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.3,\n    shadowRadius: 4,\n  },\n  trialModalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n  },\n  trialModalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  trialModalBody: {\n    padding: 20,\n    alignItems: 'center',\n  },\n  trialIcon: {\n    marginBottom: 15,\n  },\n  trialTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 10,\n  },\n  trialDescription: {\n    fontSize: 16,\n    color: '#333',\n    textAlign: 'center',\n    marginBottom: 20,\n    lineHeight: 24,\n  },\n  benefitsContainer: {\n    marginBottom: 20,\n  },\n  benefitRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  benefitText: {\n    fontSize: 16,\n    color: '#333',\n    marginLeft: 8,\n  },\n  phoneInputContainer: {\n    width: '100%',\n    marginBottom: 20,\n  },\n  phoneLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 8,\n    color: '#333',\n  },\n  phoneInputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 8,\n    padding: 12,\n  },\n  phoneIcon: {\n    marginRight: 8,\n  },\n  phoneInput: {\n    flex: 1,\n    fontSize: 16,\n  },\n  errorText: {\n    color: 'red',\n    fontSize: 12,\n    marginTop: 5,\n  },\n  startTrialButton: {\n    backgroundColor: '#0066CC',\n    padding: 12,\n    borderRadius: 8,\n    flex: 1.5,\n    alignItems: 'center',\n  },\n  startTrialButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n  termsText: {\n    fontSize: 12,\n    color: '#666',\n    textAlign: 'center',\n    marginTop: 10,\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#f0f0f0',\n    paddingVertical: 4,\n    paddingHorizontal: 8,\n    borderRadius: 12,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n  composeModalContent: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    width: '100%',\n    maxWidth: 400,\n    overflow: 'hidden',\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.3,\n    shadowRadius: 4,\n  },\n  composeModalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n    backgroundColor: 'white',\n  },\n  chatHeaderInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  chatHeaderAvatar: {\n    width: 36,\n    height: 36,\n    borderRadius: 18,\n    marginRight: 8,\n  },\n  chatHeaderAvatarPlaceholder: {\n    width: 36,\n    height: 36,\n    borderRadius: 18,\n    backgroundColor: '#f0f0f0',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 8,\n  },\n  chatHeaderTextContainer: {\n    flexDirection: 'column',\n    flex: 1,\n  },\n  composeModalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  chatHeaderPostTitle: {\n    fontSize: 14,\n    color: '#666',\n  },\n  chatMessagesContainer: {\n    flex: 1,\n    backgroundColor: '#f8f8f8',\n  },\n  messagesListContent: {\n    padding: 16,\n    flexGrow: 1,\n    justifyContent: 'flex-end',\n  },\n  messageBubble: {\n    maxWidth: '80%',\n    padding: 12,\n    borderRadius: 18,\n    marginBottom: 8,\n  },\n  myMessage: {\n    backgroundColor: '#0066CC',\n    alignSelf: 'flex-end',\n    borderBottomRightRadius: 4,\n  },\n  theirMessage: {\n    backgroundColor: 'white',\n    alignSelf: 'flex-start',\n    borderBottomLeftRadius: 4,\n  },\n  messageText: {\n    fontSize: 16,\n  },\n  myMessageText: {\n    color: 'white',\n  },\n  theirMessageText: {\n    color: '#333',\n  },\n  messageTime: {\n    fontSize: 12,\n    marginTop: 4,\n    alignSelf: 'flex-end',\n  },\n  myMessageTime: {\n    color: 'rgba(255, 255, 255, 0.7)',\n  },\n  theirMessageTime: {\n    color: 'rgba(0, 0, 0, 0.5)',\n  },\n  chatInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    backgroundColor: 'white',\n    borderTopWidth: 1,\n    borderTopColor: '#eee',\n  },\n  chatInput: {\n    flex: 1,\n    padding: 12,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 20,\n    marginRight: 10,\n    maxHeight: 100,\n  },\n  sendButton: {\n    backgroundColor: '#0066CC',\n    borderRadius: 25,\n    width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  sendButtonDisabled: {\n    backgroundColor: '#cccccc',\n  },\n  noMessagesContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  noMessagesText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#666',\n    marginTop: 10,\n  },\n  noMessagesSubtext: {\n    fontSize: 14,\n    color: '#999',\n    textAlign: 'center',\n    marginTop: 5,\n  },\n  resetButton: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    backgroundColor: '#FF3B30',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 24,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  resetButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    marginLeft: 4,\n  },\n  fullScreenModalOverlay: {\n    flex: 1,\n    backgroundColor: 'white',\n  },\n  chatModalContent: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  unreadDot: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    width: 12,\n    height: 12,\n    backgroundColor: '#0066CC',\n    borderRadius: 6,\n    borderWidth: 2,\n    borderColor: 'white',\n  },\n});\n\nexport default ChatListScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}